
car_parking_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00003102  00003196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800190  00800190  000032c6  2**0
                  ALLOC
  3 .stab         000027fc  00000000  00000000  000032c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ee5  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000069a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ae7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 11 	call	0x237e	; 0x237e <main>
      8a:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e3 57       	subi	r30, 0x73	; 115
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <Buzzer_init>:
 *
 * Author:Eman Sayed Hamdy
 */
#include"Buzzer.h"
#include"gpio.h"
void Buzzer_init(void){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
//Initializes the buzzer pin direction and turn off the buzzer.
	GPIO_setupPinDirection(PORTC_ID , PIN5_ID , PIN_OUTPUT);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <Buzzer_on>:
void Buzzer_on(void){
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
//Activates the buzzer.
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_HIGH);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	65 e0       	ldi	r22, 0x05	; 5
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <Buzzer_off>:
void Buzzer_off(void){
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	//Deactivates the buzzer.
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_LOW);
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	65 e0       	ldi	r22, 0x05	; 5
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <LCD_sendCommand>:
 */
#include<util/delay.h>
#include"common_macros.h"
#include"gpio.h"
#include "LCD_Driver.h"
void LCD_sendCommand(uint8 command) {
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	c3 56       	subi	r28, 0x63	; 99
     d2c:	d0 40       	sbci	r29, 0x00	; 0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	fe 01       	movw	r30, r28
     d3a:	ed 59       	subi	r30, 0x9D	; 157
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	80 83       	st	Z, r24
	GPIO_writePin(PORT_ID_RS, PIN_ID_RS, LOGIC_LOW);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
     d4a:	fe 01       	movw	r30, r28
     d4c:	e1 5a       	subi	r30, 0xA1	; 161
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a0 e8       	ldi	r26, 0x80	; 128
     d56:	bf e3       	ldi	r27, 0x3F	; 63
     d58:	80 83       	st	Z, r24
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	a2 83       	std	Z+2, r26	; 0x02
     d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	8e 01       	movw	r16, r28
     d62:	05 5a       	subi	r16, 0xA5	; 165
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	fe 01       	movw	r30, r28
     d68:	e1 5a       	subi	r30, 0xA1	; 161
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a e7       	ldi	r20, 0x7A	; 122
     d7a:	55 e4       	ldi	r21, 0x45	; 69
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	a2 83       	std	Z+2, r26	; 0x02
     d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d8e:	fe 01       	movw	r30, r28
     d90:	e5 5a       	subi	r30, 0xA5	; 165
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da8:	88 23       	and	r24, r24
     daa:	44 f4       	brge	.+16     	; 0xdbc <LCD_sendCommand+0x9e>
		__ticks = 1;
     dac:	fe 01       	movw	r30, r28
     dae:	e7 5a       	subi	r30, 0xA7	; 167
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
     dba:	64 c0       	rjmp	.+200    	; 0xe84 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
     dbc:	fe 01       	movw	r30, r28
     dbe:	e5 5a       	subi	r30, 0xA5	; 165
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <LCD_sendCommand+0xbe>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	fe 01       	movw	r30, r28
     dde:	e1 5a       	subi	r30, 0xA1	; 161
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8e 01       	movw	r16, r28
     dfc:	07 5a       	subi	r16, 0xA7	; 167
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <LCD_sendCommand+0x134>
     e14:	fe 01       	movw	r30, r28
     e16:	e9 5a       	subi	r30, 0xA9	; 169
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 e9       	ldi	r24, 0x90	; 144
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e22:	fe 01       	movw	r30, r28
     e24:	e9 5a       	subi	r30, 0xA9	; 169
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <LCD_sendCommand+0x10e>
     e30:	fe 01       	movw	r30, r28
     e32:	e9 5a       	subi	r30, 0xA9	; 169
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	de 01       	movw	r26, r28
     e3c:	a7 5a       	subi	r26, 0xA7	; 167
     e3e:	bf 4f       	sbci	r27, 0xFF	; 255
     e40:	fe 01       	movw	r30, r28
     e42:	e7 5a       	subi	r30, 0xA7	; 167
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	fe 01       	movw	r30, r28
     e54:	e7 5a       	subi	r30, 0xA7	; 167
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	d1 f6       	brne	.-76     	; 0xe14 <LCD_sendCommand+0xf6>
     e60:	27 c0       	rjmp	.+78     	; 0xeb0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	8e 01       	movw	r16, r28
     e64:	07 5a       	subi	r16, 0xA7	; 167
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	fe 01       	movw	r30, r28
     e6a:	e5 5a       	subi	r30, 0xA5	; 165
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	de 01       	movw	r26, r28
     e86:	ab 5a       	subi	r26, 0xAB	; 171
     e88:	bf 4f       	sbci	r27, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	e7 5a       	subi	r30, 0xA7	; 167
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	8d 93       	st	X+, r24
     e96:	9c 93       	st	X, r25
     e98:	fe 01       	movw	r30, r28
     e9a:	eb 5a       	subi	r30, 0xAB	; 171
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <LCD_sendCommand+0x184>
     ea6:	fe 01       	movw	r30, r28
     ea8:	eb 5a       	subi	r30, 0xAB	; 171
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_HIGH);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	62 e0       	ldi	r22, 0x02	; 2
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
     eba:	fe 01       	movw	r30, r28
     ebc:	ef 5a       	subi	r30, 0xAF	; 175
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a0 e8       	ldi	r26, 0x80	; 128
     ec6:	bf e3       	ldi	r27, 0x3F	; 63
     ec8:	80 83       	st	Z, r24
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	a2 83       	std	Z+2, r26	; 0x02
     ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed0:	8e 01       	movw	r16, r28
     ed2:	03 5b       	subi	r16, 0xB3	; 179
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	fe 01       	movw	r30, r28
     ed8:	ef 5a       	subi	r30, 0xAF	; 175
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a e7       	ldi	r20, 0x7A	; 122
     eea:	55 e4       	ldi	r21, 0x45	; 69
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	f8 01       	movw	r30, r16
     ef6:	80 83       	st	Z, r24
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	a2 83       	std	Z+2, r26	; 0x02
     efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     efe:	fe 01       	movw	r30, r28
     f00:	e3 5b       	subi	r30, 0xB3	; 179
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	44 f4       	brge	.+16     	; 0xf2c <LCD_sendCommand+0x20e>
		__ticks = 1;
     f1c:	fe 01       	movw	r30, r28
     f1e:	e5 5b       	subi	r30, 0xB5	; 181
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
     f2a:	64 c0       	rjmp	.+200    	; 0xff4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     f2c:	fe 01       	movw	r30, r28
     f2e:	e3 5b       	subi	r30, 0xB3	; 179
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	60 81       	ld	r22, Z
     f34:	71 81       	ldd	r23, Z+1	; 0x01
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	57 e4       	ldi	r21, 0x47	; 71
     f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f46:	18 16       	cp	r1, r24
     f48:	0c f0       	brlt	.+2      	; 0xf4c <LCD_sendCommand+0x22e>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	fe 01       	movw	r30, r28
     f4e:	ef 5a       	subi	r30, 0xAF	; 175
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	8e 01       	movw	r16, r28
     f6c:	05 5b       	subi	r16, 0xB5	; 181
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	f8 01       	movw	r30, r16
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
     f82:	1f c0       	rjmp	.+62     	; 0xfc2 <LCD_sendCommand+0x2a4>
     f84:	fe 01       	movw	r30, r28
     f86:	e7 5b       	subi	r30, 0xB7	; 183
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 e9       	ldi	r24, 0x90	; 144
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
     f92:	fe 01       	movw	r30, r28
     f94:	e7 5b       	subi	r30, 0xB7	; 183
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <LCD_sendCommand+0x27e>
     fa0:	fe 01       	movw	r30, r28
     fa2:	e7 5b       	subi	r30, 0xB7	; 183
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     faa:	de 01       	movw	r26, r28
     fac:	a5 5b       	subi	r26, 0xB5	; 181
     fae:	bf 4f       	sbci	r27, 0xFF	; 255
     fb0:	fe 01       	movw	r30, r28
     fb2:	e5 5b       	subi	r30, 0xB5	; 181
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	fe 01       	movw	r30, r28
     fc4:	e5 5b       	subi	r30, 0xB5	; 181
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	d1 f6       	brne	.-76     	; 0xf84 <LCD_sendCommand+0x266>
     fd0:	27 c0       	rjmp	.+78     	; 0x1020 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	8e 01       	movw	r16, r28
     fd4:	05 5b       	subi	r16, 0xB5	; 181
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	fe 01       	movw	r30, r28
     fda:	e3 5b       	subi	r30, 0xB3	; 179
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	f8 01       	movw	r30, r16
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
     ff4:	de 01       	movw	r26, r28
     ff6:	a9 5b       	subi	r26, 0xB9	; 185
     ff8:	bf 4f       	sbci	r27, 0xFF	; 255
     ffa:	fe 01       	movw	r30, r28
     ffc:	e5 5b       	subi	r30, 0xB5	; 181
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	8d 93       	st	X+, r24
    1006:	9c 93       	st	X, r25
    1008:	fe 01       	movw	r30, r28
    100a:	e9 5b       	subi	r30, 0xB9	; 185
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <LCD_sendCommand+0x2f4>
    1016:	fe 01       	movw	r30, r28
    1018:	e9 5b       	subi	r30, 0xB9	; 185
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	80 83       	st	Z, r24
	_delay_ms(1);
#if(LCD_NUM_BIT_MODE == 4)
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D4,GETBIT(command , 4));
    1020:	fe 01       	movw	r30, r28
    1022:	ed 59       	subi	r30, 0x9D	; 157
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	80 71       	andi	r24, 0x10	; 16
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	95 95       	asr	r25
    1036:	87 95       	ror	r24
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	95 95       	asr	r25
    103e:	87 95       	ror	r24
    1040:	98 2f       	mov	r25, r24
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	63 e0       	ldi	r22, 0x03	; 3
    1046:	49 2f       	mov	r20, r25
    1048:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D5,GETBIT(command , 5));
    104c:	fe 01       	movw	r30, r28
    104e:	ed 59       	subi	r30, 0x9D	; 157
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 72       	andi	r24, 0x20	; 32
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	95 95       	asr	r25
    105e:	87 95       	ror	r24
    1060:	95 95       	asr	r25
    1062:	87 95       	ror	r24
    1064:	95 95       	asr	r25
    1066:	87 95       	ror	r24
    1068:	95 95       	asr	r25
    106a:	87 95       	ror	r24
    106c:	95 95       	asr	r25
    106e:	87 95       	ror	r24
    1070:	98 2f       	mov	r25, r24
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	64 e0       	ldi	r22, 0x04	; 4
    1076:	49 2f       	mov	r20, r25
    1078:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D6,GETBIT(command , 6));
    107c:	fe 01       	movw	r30, r28
    107e:	ed 59       	subi	r30, 0x9D	; 157
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 81       	ld	r24, Z
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	80 74       	andi	r24, 0x40	; 64
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	08 2e       	mov	r0, r24
    108e:	89 2f       	mov	r24, r25
    1090:	00 0c       	add	r0, r0
    1092:	88 1f       	adc	r24, r24
    1094:	99 0b       	sbc	r25, r25
    1096:	00 0c       	add	r0, r0
    1098:	88 1f       	adc	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	98 2f       	mov	r25, r24
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	65 e0       	ldi	r22, 0x05	; 5
    10a2:	49 2f       	mov	r20, r25
    10a4:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D7,GETBIT(command , 7));
    10a8:	fe 01       	movw	r30, r28
    10aa:	ed 59       	subi	r30, 0x9D	; 157
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	98 2f       	mov	r25, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	99 27       	eor	r25, r25
    10b6:	99 1f       	adc	r25, r25
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	66 e0       	ldi	r22, 0x06	; 6
    10bc:	49 2f       	mov	r20, r25
    10be:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    10c2:	fe 01       	movw	r30, r28
    10c4:	ed 5b       	subi	r30, 0xBD	; 189
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e8       	ldi	r26, 0x80	; 128
    10ce:	bf e3       	ldi	r27, 0x3F	; 63
    10d0:	80 83       	st	Z, r24
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	a2 83       	std	Z+2, r26	; 0x02
    10d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	8e 01       	movw	r16, r28
    10da:	01 5c       	subi	r16, 0xC1	; 193
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	fe 01       	movw	r30, r28
    10e0:	ed 5b       	subi	r30, 0xBD	; 189
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	93 81       	ldd	r25, Z+3	; 0x03
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a e7       	ldi	r20, 0x7A	; 122
    10f2:	55 e4       	ldi	r21, 0x45	; 69
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	80 83       	st	Z, r24
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	a2 83       	std	Z+2, r26	; 0x02
    1104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1106:	fe 01       	movw	r30, r28
    1108:	ff 96       	adiw	r30, 0x3f	; 63
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <LCD_sendCommand+0x40e>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9e af       	std	Y+62, r25	; 0x3e
    1128:	8d af       	std	Y+61, r24	; 0x3d
    112a:	46 c0       	rjmp	.+140    	; 0x11b8 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    112c:	fe 01       	movw	r30, r28
    112e:	ff 96       	adiw	r30, 0x3f	; 63
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	64 f5       	brge	.+88     	; 0x11a0 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	fe 01       	movw	r30, r28
    114a:	ed 5b       	subi	r30, 0xBD	; 189
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9e af       	std	Y+62, r25	; 0x3e
    1174:	8d af       	std	Y+61, r24	; 0x3d
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <LCD_sendCommand+0x478>
    1178:	80 e9       	ldi	r24, 0x90	; 144
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	9c af       	std	Y+60, r25	; 0x3c
    117e:	8b af       	std	Y+59, r24	; 0x3b
    1180:	8b ad       	ldd	r24, Y+59	; 0x3b
    1182:	9c ad       	ldd	r25, Y+60	; 0x3c
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <LCD_sendCommand+0x466>
    1188:	9c af       	std	Y+60, r25	; 0x3c
    118a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118c:	8d ad       	ldd	r24, Y+61	; 0x3d
    118e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	9e af       	std	Y+62, r25	; 0x3e
    1194:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1196:	8d ad       	ldd	r24, Y+61	; 0x3d
    1198:	9e ad       	ldd	r25, Y+62	; 0x3e
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	69 f7       	brne	.-38     	; 0x1178 <LCD_sendCommand+0x45a>
    119e:	16 c0       	rjmp	.+44     	; 0x11cc <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a0:	fe 01       	movw	r30, r28
    11a2:	ff 96       	adiw	r30, 0x3f	; 63
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9e af       	std	Y+62, r25	; 0x3e
    11b6:	8d af       	std	Y+61, r24	; 0x3d
    11b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    11bc:	9a af       	std	Y+58, r25	; 0x3a
    11be:	89 af       	std	Y+57, r24	; 0x39
    11c0:	89 ad       	ldd	r24, Y+57	; 0x39
    11c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <LCD_sendCommand+0x4a6>
    11c8:	9a af       	std	Y+58, r25	; 0x3a
    11ca:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_LOW);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	62 e0       	ldi	r22, 0x02	; 2
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e8       	ldi	r26, 0x80	; 128
    11dc:	bf e3       	ldi	r27, 0x3F	; 63
    11de:	8d ab       	std	Y+53, r24	; 0x35
    11e0:	9e ab       	std	Y+54, r25	; 0x36
    11e2:	af ab       	std	Y+55, r26	; 0x37
    11e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	6d a9       	ldd	r22, Y+53	; 0x35
    11e8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ea:	8f a9       	ldd	r24, Y+55	; 0x37
    11ec:	98 ad       	ldd	r25, Y+56	; 0x38
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a e7       	ldi	r20, 0x7A	; 122
    11f4:	55 e4       	ldi	r21, 0x45	; 69
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	89 ab       	std	Y+49, r24	; 0x31
    1200:	9a ab       	std	Y+50, r25	; 0x32
    1202:	ab ab       	std	Y+51, r26	; 0x33
    1204:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1206:	69 a9       	ldd	r22, Y+49	; 0x31
    1208:	7a a9       	ldd	r23, Y+50	; 0x32
    120a:	8b a9       	ldd	r24, Y+51	; 0x33
    120c:	9c a9       	ldd	r25, Y+52	; 0x34
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121a:	88 23       	and	r24, r24
    121c:	2c f4       	brge	.+10     	; 0x1228 <LCD_sendCommand+0x50a>
		__ticks = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	98 ab       	std	Y+48, r25	; 0x30
    1224:	8f a7       	std	Y+47, r24	; 0x2f
    1226:	3f c0       	rjmp	.+126    	; 0x12a6 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1228:	69 a9       	ldd	r22, Y+49	; 0x31
    122a:	7a a9       	ldd	r23, Y+50	; 0x32
    122c:	8b a9       	ldd	r24, Y+51	; 0x33
    122e:	9c a9       	ldd	r25, Y+52	; 0x34
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123c:	18 16       	cp	r1, r24
    123e:	4c f5       	brge	.+82     	; 0x1292 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1240:	6d a9       	ldd	r22, Y+53	; 0x35
    1242:	7e a9       	ldd	r23, Y+54	; 0x36
    1244:	8f a9       	ldd	r24, Y+55	; 0x37
    1246:	98 ad       	ldd	r25, Y+56	; 0x38
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e2       	ldi	r20, 0x20	; 32
    124e:	51 e4       	ldi	r21, 0x41	; 65
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	bc 01       	movw	r22, r24
    125a:	cd 01       	movw	r24, r26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	98 ab       	std	Y+48, r25	; 0x30
    1266:	8f a7       	std	Y+47, r24	; 0x2f
    1268:	0f c0       	rjmp	.+30     	; 0x1288 <LCD_sendCommand+0x56a>
    126a:	80 e9       	ldi	r24, 0x90	; 144
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	9e a7       	std	Y+46, r25	; 0x2e
    1270:	8d a7       	std	Y+45, r24	; 0x2d
    1272:	8d a5       	ldd	r24, Y+45	; 0x2d
    1274:	9e a5       	ldd	r25, Y+46	; 0x2e
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <LCD_sendCommand+0x558>
    127a:	9e a7       	std	Y+46, r25	; 0x2e
    127c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1280:	98 a9       	ldd	r25, Y+48	; 0x30
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	98 ab       	std	Y+48, r25	; 0x30
    1286:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1288:	8f a5       	ldd	r24, Y+47	; 0x2f
    128a:	98 a9       	ldd	r25, Y+48	; 0x30
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	69 f7       	brne	.-38     	; 0x126a <LCD_sendCommand+0x54c>
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1292:	69 a9       	ldd	r22, Y+49	; 0x31
    1294:	7a a9       	ldd	r23, Y+50	; 0x32
    1296:	8b a9       	ldd	r24, Y+51	; 0x33
    1298:	9c a9       	ldd	r25, Y+52	; 0x34
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	98 ab       	std	Y+48, r25	; 0x30
    12a4:	8f a7       	std	Y+47, r24	; 0x2f
    12a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a8:	98 a9       	ldd	r25, Y+48	; 0x30
    12aa:	9c a7       	std	Y+44, r25	; 0x2c
    12ac:	8b a7       	std	Y+43, r24	; 0x2b
    12ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    12b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <LCD_sendCommand+0x594>
    12b6:	9c a7       	std	Y+44, r25	; 0x2c
    12b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_HIGH);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	62 e0       	ldi	r22, 0x02	; 2
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a0 e8       	ldi	r26, 0x80	; 128
    12ca:	bf e3       	ldi	r27, 0x3F	; 63
    12cc:	8f a3       	std	Y+39, r24	; 0x27
    12ce:	98 a7       	std	Y+40, r25	; 0x28
    12d0:	a9 a7       	std	Y+41, r26	; 0x29
    12d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	6f a1       	ldd	r22, Y+39	; 0x27
    12d6:	78 a5       	ldd	r23, Y+40	; 0x28
    12d8:	89 a5       	ldd	r24, Y+41	; 0x29
    12da:	9a a5       	ldd	r25, Y+42	; 0x2a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a e7       	ldi	r20, 0x7A	; 122
    12e2:	55 e4       	ldi	r21, 0x45	; 69
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	8b a3       	std	Y+35, r24	; 0x23
    12ee:	9c a3       	std	Y+36, r25	; 0x24
    12f0:	ad a3       	std	Y+37, r26	; 0x25
    12f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f4:	6b a1       	ldd	r22, Y+35	; 0x23
    12f6:	7c a1       	ldd	r23, Y+36	; 0x24
    12f8:	8d a1       	ldd	r24, Y+37	; 0x25
    12fa:	9e a1       	ldd	r25, Y+38	; 0x26
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9a a3       	std	Y+34, r25	; 0x22
    1312:	89 a3       	std	Y+33, r24	; 0x21
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1316:	6b a1       	ldd	r22, Y+35	; 0x23
    1318:	7c a1       	ldd	r23, Y+36	; 0x24
    131a:	8d a1       	ldd	r24, Y+37	; 0x25
    131c:	9e a1       	ldd	r25, Y+38	; 0x26
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	3f ef       	ldi	r19, 0xFF	; 255
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	57 e4       	ldi	r21, 0x47	; 71
    1326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	4c f5       	brge	.+82     	; 0x1380 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132e:	6f a1       	ldd	r22, Y+39	; 0x27
    1330:	78 a5       	ldd	r23, Y+40	; 0x28
    1332:	89 a5       	ldd	r24, Y+41	; 0x29
    1334:	9a a5       	ldd	r25, Y+42	; 0x2a
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e2       	ldi	r20, 0x20	; 32
    133c:	51 e4       	ldi	r21, 0x41	; 65
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9a a3       	std	Y+34, r25	; 0x22
    1354:	89 a3       	std	Y+33, r24	; 0x21
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <LCD_sendCommand+0x658>
    1358:	80 e9       	ldi	r24, 0x90	; 144
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	98 a3       	std	Y+32, r25	; 0x20
    135e:	8f 8f       	std	Y+31, r24	; 0x1f
    1360:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1362:	98 a1       	ldd	r25, Y+32	; 0x20
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <LCD_sendCommand+0x646>
    1368:	98 a3       	std	Y+32, r25	; 0x20
    136a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136c:	89 a1       	ldd	r24, Y+33	; 0x21
    136e:	9a a1       	ldd	r25, Y+34	; 0x22
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	9a a3       	std	Y+34, r25	; 0x22
    1374:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1376:	89 a1       	ldd	r24, Y+33	; 0x21
    1378:	9a a1       	ldd	r25, Y+34	; 0x22
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f7       	brne	.-38     	; 0x1358 <LCD_sendCommand+0x63a>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1380:	6b a1       	ldd	r22, Y+35	; 0x23
    1382:	7c a1       	ldd	r23, Y+36	; 0x24
    1384:	8d a1       	ldd	r24, Y+37	; 0x25
    1386:	9e a1       	ldd	r25, Y+38	; 0x26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9a a3       	std	Y+34, r25	; 0x22
    1392:	89 a3       	std	Y+33, r24	; 0x21
    1394:	89 a1       	ldd	r24, Y+33	; 0x21
    1396:	9a a1       	ldd	r25, Y+34	; 0x22
    1398:	9e 8f       	std	Y+30, r25	; 0x1e
    139a:	8d 8f       	std	Y+29, r24	; 0x1d
    139c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    139e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <LCD_sendCommand+0x682>
    13a4:	9e 8f       	std	Y+30, r25	; 0x1e
    13a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D4,GETBIT(command , 0));
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 59       	subi	r30, 0x9D	; 157
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	98 2f       	mov	r25, r24
    13b2:	91 70       	andi	r25, 0x01	; 1
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	63 e0       	ldi	r22, 0x03	; 3
    13b8:	49 2f       	mov	r20, r25
    13ba:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D5,GETBIT(command , 1));
    13be:	fe 01       	movw	r30, r28
    13c0:	ed 59       	subi	r30, 0x9D	; 157
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	82 70       	andi	r24, 0x02	; 2
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	95 95       	asr	r25
    13d0:	87 95       	ror	r24
    13d2:	98 2f       	mov	r25, r24
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	64 e0       	ldi	r22, 0x04	; 4
    13d8:	49 2f       	mov	r20, r25
    13da:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D6,GETBIT(command , 2));
    13de:	fe 01       	movw	r30, r28
    13e0:	ed 59       	subi	r30, 0x9D	; 157
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	84 70       	andi	r24, 0x04	; 4
    13ec:	90 70       	andi	r25, 0x00	; 0
    13ee:	95 95       	asr	r25
    13f0:	87 95       	ror	r24
    13f2:	95 95       	asr	r25
    13f4:	87 95       	ror	r24
    13f6:	98 2f       	mov	r25, r24
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	65 e0       	ldi	r22, 0x05	; 5
    13fc:	49 2f       	mov	r20, r25
    13fe:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D7,GETBIT(command , 3));
    1402:	fe 01       	movw	r30, r28
    1404:	ed 59       	subi	r30, 0x9D	; 157
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	88 70       	andi	r24, 0x08	; 8
    1410:	90 70       	andi	r25, 0x00	; 0
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	95 95       	asr	r25
    1418:	87 95       	ror	r24
    141a:	95 95       	asr	r25
    141c:	87 95       	ror	r24
    141e:	98 2f       	mov	r25, r24
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	66 e0       	ldi	r22, 0x06	; 6
    1424:	49 2f       	mov	r20, r25
    1426:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e8       	ldi	r26, 0x80	; 128
    1430:	bf e3       	ldi	r27, 0x3F	; 63
    1432:	89 8f       	std	Y+25, r24	; 0x19
    1434:	9a 8f       	std	Y+26, r25	; 0x1a
    1436:	ab 8f       	std	Y+27, r26	; 0x1b
    1438:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	69 8d       	ldd	r22, Y+25	; 0x19
    143c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    143e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4a e7       	ldi	r20, 0x7A	; 122
    1448:	55 e4       	ldi	r21, 0x45	; 69
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8d 8b       	std	Y+21, r24	; 0x15
    1454:	9e 8b       	std	Y+22, r25	; 0x16
    1456:	af 8b       	std	Y+23, r26	; 0x17
    1458:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    145a:	6d 89       	ldd	r22, Y+21	; 0x15
    145c:	7e 89       	ldd	r23, Y+22	; 0x16
    145e:	8f 89       	ldd	r24, Y+23	; 0x17
    1460:	98 8d       	ldd	r25, Y+24	; 0x18
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <LCD_sendCommand+0x75e>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 8b       	std	Y+20, r25	; 0x14
    1478:	8b 8b       	std	Y+19, r24	; 0x13
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    147c:	6d 89       	ldd	r22, Y+21	; 0x15
    147e:	7e 89       	ldd	r23, Y+22	; 0x16
    1480:	8f 89       	ldd	r24, Y+23	; 0x17
    1482:	98 8d       	ldd	r25, Y+24	; 0x18
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	69 8d       	ldd	r22, Y+25	; 0x19
    1496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    149a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e2       	ldi	r20, 0x20	; 32
    14a2:	51 e4       	ldi	r21, 0x41	; 65
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9c 8b       	std	Y+20, r25	; 0x14
    14ba:	8b 8b       	std	Y+19, r24	; 0x13
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <LCD_sendCommand+0x7be>
    14be:	80 e9       	ldi	r24, 0x90	; 144
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	9a 8b       	std	Y+18, r25	; 0x12
    14c4:	89 8b       	std	Y+17, r24	; 0x11
    14c6:	89 89       	ldd	r24, Y+17	; 0x11
    14c8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <LCD_sendCommand+0x7ac>
    14ce:	9a 8b       	std	Y+18, r25	; 0x12
    14d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8b 89       	ldd	r24, Y+19	; 0x13
    14d4:	9c 89       	ldd	r25, Y+20	; 0x14
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9c 8b       	std	Y+20, r25	; 0x14
    14da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8b 89       	ldd	r24, Y+19	; 0x13
    14de:	9c 89       	ldd	r25, Y+20	; 0x14
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f7       	brne	.-38     	; 0x14be <LCD_sendCommand+0x7a0>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6d 89       	ldd	r22, Y+21	; 0x15
    14e8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ea:	8f 89       	ldd	r24, Y+23	; 0x17
    14ec:	98 8d       	ldd	r25, Y+24	; 0x18
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	98 8b       	std	Y+16, r25	; 0x10
    1500:	8f 87       	std	Y+15, r24	; 0x0f
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	98 89       	ldd	r25, Y+16	; 0x10
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_sendCommand+0x7e8>
    150a:	98 8b       	std	Y+16, r25	; 0x10
    150c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_LOW);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	62 e0       	ldi	r22, 0x02	; 2
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a0 e8       	ldi	r26, 0x80	; 128
    151e:	bf e3       	ldi	r27, 0x3F	; 63
    1520:	8b 87       	std	Y+11, r24	; 0x0b
    1522:	9c 87       	std	Y+12, r25	; 0x0c
    1524:	ad 87       	std	Y+13, r26	; 0x0d
    1526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	8d 85       	ldd	r24, Y+13	; 0x0d
    152e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a e7       	ldi	r20, 0x7A	; 122
    1536:	55 e4       	ldi	r21, 0x45	; 69
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	8f 83       	std	Y+7, r24	; 0x07
    1542:	98 87       	std	Y+8, r25	; 0x08
    1544:	a9 87       	std	Y+9, r26	; 0x09
    1546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <LCD_sendCommand+0x84c>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	57 e4       	ldi	r21, 0x47	; 71
    157a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157e:	18 16       	cp	r1, r24
    1580:	4c f5       	brge	.+82     	; 0x15d4 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	6b 85       	ldd	r22, Y+11	; 0x0b
    1584:	7c 85       	ldd	r23, Y+12	; 0x0c
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <LCD_sendCommand+0x8ac>
    15ac:	80 e9       	ldi	r24, 0x90	; 144
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <LCD_sendCommand+0x89a>
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	69 f7       	brne	.-38     	; 0x15ac <LCD_sendCommand+0x88e>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	6f 81       	ldd	r22, Y+7	; 0x07
    15d6:	78 85       	ldd	r23, Y+8	; 0x08
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	9a 85       	ldd	r25, Y+10	; 0x0a
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_sendCommand+0x8d6>
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort( PORT_DATA_ID, command);
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_LOW);
	_delay_ms(1);
#endif
}
    15fc:	cd 59       	subi	r28, 0x9D	; 157
    15fe:	df 4f       	sbci	r29, 0xFF	; 255
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 DATA) {
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	c3 56       	subi	r28, 0x63	; 99
    1622:	d0 40       	sbci	r29, 0x00	; 0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	fe 01       	movw	r30, r28
    1630:	ed 59       	subi	r30, 0x9D	; 157
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 83       	st	Z, r24
	GPIO_writePin(PORT_ID_RS, PIN_ID_RS, LOGIC_HIGH);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    1640:	fe 01       	movw	r30, r28
    1642:	e1 5a       	subi	r30, 0xA1	; 161
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 e8       	ldi	r26, 0x80	; 128
    164c:	bf e3       	ldi	r27, 0x3F	; 63
    164e:	80 83       	st	Z, r24
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	a2 83       	std	Z+2, r26	; 0x02
    1654:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1656:	8e 01       	movw	r16, r28
    1658:	05 5a       	subi	r16, 0xA5	; 165
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	e1 5a       	subi	r30, 0xA1	; 161
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a e7       	ldi	r20, 0x7A	; 122
    1670:	55 e4       	ldi	r21, 0x45	; 69
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	f8 01       	movw	r30, r16
    167c:	80 83       	st	Z, r24
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	a2 83       	std	Z+2, r26	; 0x02
    1682:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1684:	fe 01       	movw	r30, r28
    1686:	e5 5a       	subi	r30, 0xA5	; 165
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	44 f4       	brge	.+16     	; 0x16b2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    16a2:	fe 01       	movw	r30, r28
    16a4:	e7 5a       	subi	r30, 0xA7	; 167
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24
    16b0:	64 c0       	rjmp	.+200    	; 0x177a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    16b2:	fe 01       	movw	r30, r28
    16b4:	e5 5a       	subi	r30, 0xA5	; 165
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <LCD_displayCharacter+0xbe>
    16d0:	43 c0       	rjmp	.+134    	; 0x1758 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	fe 01       	movw	r30, r28
    16d4:	e1 5a       	subi	r30, 0xA1	; 161
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8e 01       	movw	r16, r28
    16f2:	07 5a       	subi	r16, 0xA7	; 167
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	1f c0       	rjmp	.+62     	; 0x1748 <LCD_displayCharacter+0x134>
    170a:	fe 01       	movw	r30, r28
    170c:	e9 5a       	subi	r30, 0xA9	; 169
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 e9       	ldi	r24, 0x90	; 144
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	fe 01       	movw	r30, r28
    171a:	e9 5a       	subi	r30, 0xA9	; 169
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_displayCharacter+0x10e>
    1726:	fe 01       	movw	r30, r28
    1728:	e9 5a       	subi	r30, 0xA9	; 169
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	de 01       	movw	r26, r28
    1732:	a7 5a       	subi	r26, 0xA7	; 167
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	e7 5a       	subi	r30, 0xA7	; 167
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	fe 01       	movw	r30, r28
    174a:	e7 5a       	subi	r30, 0xA7	; 167
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	d1 f6       	brne	.-76     	; 0x170a <LCD_displayCharacter+0xf6>
    1756:	27 c0       	rjmp	.+78     	; 0x17a6 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	8e 01       	movw	r16, r28
    175a:	07 5a       	subi	r16, 0xA7	; 167
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	e5 5a       	subi	r30, 0xA5	; 165
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	de 01       	movw	r26, r28
    177c:	ab 5a       	subi	r26, 0xAB	; 171
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	e7 5a       	subi	r30, 0xA7	; 167
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	8d 93       	st	X+, r24
    178c:	9c 93       	st	X, r25
    178e:	fe 01       	movw	r30, r28
    1790:	eb 5a       	subi	r30, 0xAB	; 171
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <LCD_displayCharacter+0x184>
    179c:	fe 01       	movw	r30, r28
    179e:	eb 5a       	subi	r30, 0xAB	; 171
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_HIGH);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	62 e0       	ldi	r22, 0x02	; 2
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    17b0:	fe 01       	movw	r30, r28
    17b2:	ef 5a       	subi	r30, 0xAF	; 175
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e8       	ldi	r26, 0x80	; 128
    17bc:	bf e3       	ldi	r27, 0x3F	; 63
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c6:	8e 01       	movw	r16, r28
    17c8:	03 5b       	subi	r16, 0xB3	; 179
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	ef 5a       	subi	r30, 0xAF	; 175
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	e3 5b       	subi	r30, 0xB3	; 179
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	44 f4       	brge	.+16     	; 0x1822 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1812:	fe 01       	movw	r30, r28
    1814:	e5 5b       	subi	r30, 0xB5	; 181
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
    1820:	64 c0       	rjmp	.+200    	; 0x18ea <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1822:	fe 01       	movw	r30, r28
    1824:	e3 5b       	subi	r30, 0xB3	; 179
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	0c f0       	brlt	.+2      	; 0x1842 <LCD_displayCharacter+0x22e>
    1840:	43 c0       	rjmp	.+134    	; 0x18c8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	fe 01       	movw	r30, r28
    1844:	ef 5a       	subi	r30, 0xAF	; 175
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	8e 01       	movw	r16, r28
    1862:	05 5b       	subi	r16, 0xB5	; 181
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	1f c0       	rjmp	.+62     	; 0x18b8 <LCD_displayCharacter+0x2a4>
    187a:	fe 01       	movw	r30, r28
    187c:	e7 5b       	subi	r30, 0xB7	; 183
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 e9       	ldi	r24, 0x90	; 144
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	fe 01       	movw	r30, r28
    188a:	e7 5b       	subi	r30, 0xB7	; 183
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_displayCharacter+0x27e>
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5b       	subi	r30, 0xB7	; 183
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	de 01       	movw	r26, r28
    18a2:	a5 5b       	subi	r26, 0xB5	; 181
    18a4:	bf 4f       	sbci	r27, 0xFF	; 255
    18a6:	fe 01       	movw	r30, r28
    18a8:	e5 5b       	subi	r30, 0xB5	; 181
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	9c 93       	st	X, r25
    18b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	fe 01       	movw	r30, r28
    18ba:	e5 5b       	subi	r30, 0xB5	; 181
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	d1 f6       	brne	.-76     	; 0x187a <LCD_displayCharacter+0x266>
    18c6:	27 c0       	rjmp	.+78     	; 0x1916 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	8e 01       	movw	r16, r28
    18ca:	05 5b       	subi	r16, 0xB5	; 181
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	fe 01       	movw	r30, r28
    18d0:	e3 5b       	subi	r30, 0xB3	; 179
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
    18ea:	de 01       	movw	r26, r28
    18ec:	a9 5b       	subi	r26, 0xB9	; 185
    18ee:	bf 4f       	sbci	r27, 0xFF	; 255
    18f0:	fe 01       	movw	r30, r28
    18f2:	e5 5b       	subi	r30, 0xB5	; 181
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	8d 93       	st	X+, r24
    18fc:	9c 93       	st	X, r25
    18fe:	fe 01       	movw	r30, r28
    1900:	e9 5b       	subi	r30, 0xB9	; 185
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_displayCharacter+0x2f4>
    190c:	fe 01       	movw	r30, r28
    190e:	e9 5b       	subi	r30, 0xB9	; 185
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
	_delay_ms(1);
#if(LCD_NUM_BIT_MODE == 4)
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D4,GETBIT(DATA , 4));
    1916:	fe 01       	movw	r30, r28
    1918:	ed 59       	subi	r30, 0x9D	; 157
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	80 71       	andi	r24, 0x10	; 16
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	95 95       	asr	r25
    1928:	87 95       	ror	r24
    192a:	95 95       	asr	r25
    192c:	87 95       	ror	r24
    192e:	95 95       	asr	r25
    1930:	87 95       	ror	r24
    1932:	95 95       	asr	r25
    1934:	87 95       	ror	r24
    1936:	98 2f       	mov	r25, r24
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	49 2f       	mov	r20, r25
    193e:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D5,GETBIT(DATA , 5));
    1942:	fe 01       	movw	r30, r28
    1944:	ed 59       	subi	r30, 0x9D	; 157
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	80 72       	andi	r24, 0x20	; 32
    1950:	90 70       	andi	r25, 0x00	; 0
    1952:	95 95       	asr	r25
    1954:	87 95       	ror	r24
    1956:	95 95       	asr	r25
    1958:	87 95       	ror	r24
    195a:	95 95       	asr	r25
    195c:	87 95       	ror	r24
    195e:	95 95       	asr	r25
    1960:	87 95       	ror	r24
    1962:	95 95       	asr	r25
    1964:	87 95       	ror	r24
    1966:	98 2f       	mov	r25, r24
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	64 e0       	ldi	r22, 0x04	; 4
    196c:	49 2f       	mov	r20, r25
    196e:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D6,GETBIT(DATA, 6));
    1972:	fe 01       	movw	r30, r28
    1974:	ed 59       	subi	r30, 0x9D	; 157
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 81       	ld	r24, Z
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	80 74       	andi	r24, 0x40	; 64
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	08 2e       	mov	r0, r24
    1984:	89 2f       	mov	r24, r25
    1986:	00 0c       	add	r0, r0
    1988:	88 1f       	adc	r24, r24
    198a:	99 0b       	sbc	r25, r25
    198c:	00 0c       	add	r0, r0
    198e:	88 1f       	adc	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	98 2f       	mov	r25, r24
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	65 e0       	ldi	r22, 0x05	; 5
    1998:	49 2f       	mov	r20, r25
    199a:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D7,GETBIT(DATA , 7));
    199e:	fe 01       	movw	r30, r28
    19a0:	ed 59       	subi	r30, 0x9D	; 157
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	98 2f       	mov	r25, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	99 27       	eor	r25, r25
    19ac:	99 1f       	adc	r25, r25
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	49 2f       	mov	r20, r25
    19b4:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    19b8:	fe 01       	movw	r30, r28
    19ba:	ed 5b       	subi	r30, 0xBD	; 189
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e8       	ldi	r26, 0x80	; 128
    19c4:	bf e3       	ldi	r27, 0x3F	; 63
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	a2 83       	std	Z+2, r26	; 0x02
    19cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	8e 01       	movw	r16, r28
    19d0:	01 5c       	subi	r16, 0xC1	; 193
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	ed 5b       	subi	r30, 0xBD	; 189
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	4a e7       	ldi	r20, 0x7A	; 122
    19e8:	55 e4       	ldi	r21, 0x45	; 69
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	f8 01       	movw	r30, r16
    19f4:	80 83       	st	Z, r24
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	a2 83       	std	Z+2, r26	; 0x02
    19fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19fc:	fe 01       	movw	r30, r28
    19fe:	ff 96       	adiw	r30, 0x3f	; 63
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e af       	std	Y+62, r25	; 0x3e
    1a1e:	8d af       	std	Y+61, r24	; 0x3d
    1a20:	46 c0       	rjmp	.+140    	; 0x1aae <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    1a22:	fe 01       	movw	r30, r28
    1a24:	ff 96       	adiw	r30, 0x3f	; 63
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	64 f5       	brge	.+88     	; 0x1a96 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ed 5b       	subi	r30, 0xBD	; 189
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e af       	std	Y+62, r25	; 0x3e
    1a6a:	8d af       	std	Y+61, r24	; 0x3d
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_displayCharacter+0x478>
    1a6e:	80 e9       	ldi	r24, 0x90	; 144
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	9c af       	std	Y+60, r25	; 0x3c
    1a74:	8b af       	std	Y+59, r24	; 0x3b
    1a76:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a78:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_displayCharacter+0x466>
    1a7e:	9c af       	std	Y+60, r25	; 0x3c
    1a80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9e af       	std	Y+62, r25	; 0x3e
    1a8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_displayCharacter+0x45a>
    1a94:	16 c0       	rjmp	.+44     	; 0x1ac2 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	fe 01       	movw	r30, r28
    1a98:	ff 96       	adiw	r30, 0x3f	; 63
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e af       	std	Y+62, r25	; 0x3e
    1aac:	8d af       	std	Y+61, r24	; 0x3d
    1aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ab2:	9a af       	std	Y+58, r25	; 0x3a
    1ab4:	89 af       	std	Y+57, r24	; 0x39
    1ab6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_displayCharacter+0x4a6>
    1abe:	9a af       	std	Y+58, r25	; 0x3a
    1ac0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_LOW);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	8d ab       	std	Y+53, r24	; 0x35
    1ad6:	9e ab       	std	Y+54, r25	; 0x36
    1ad8:	af ab       	std	Y+55, r26	; 0x37
    1ada:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ade:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a e7       	ldi	r20, 0x7A	; 122
    1aea:	55 e4       	ldi	r21, 0x45	; 69
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	89 ab       	std	Y+49, r24	; 0x31
    1af6:	9a ab       	std	Y+50, r25	; 0x32
    1af8:	ab ab       	std	Y+51, r26	; 0x33
    1afa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1afc:	69 a9       	ldd	r22, Y+49	; 0x31
    1afe:	7a a9       	ldd	r23, Y+50	; 0x32
    1b00:	8b a9       	ldd	r24, Y+51	; 0x33
    1b02:	9c a9       	ldd	r25, Y+52	; 0x34
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6d a9       	ldd	r22, Y+53	; 0x35
    1b38:	7e a9       	ldd	r23, Y+54	; 0x36
    1b3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	98 ab       	std	Y+48, r25	; 0x30
    1b5c:	8f a7       	std	Y+47, r24	; 0x2f
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_displayCharacter+0x56a>
    1b60:	80 e9       	ldi	r24, 0x90	; 144
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	9e a7       	std	Y+46, r25	; 0x2e
    1b66:	8d a7       	std	Y+45, r24	; 0x2d
    1b68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_displayCharacter+0x558>
    1b70:	9e a7       	std	Y+46, r25	; 0x2e
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b76:	98 a9       	ldd	r25, Y+48	; 0x30
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_displayCharacter+0x54c>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	69 a9       	ldd	r22, Y+49	; 0x31
    1b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	98 ab       	std	Y+48, r25	; 0x30
    1b9a:	8f a7       	std	Y+47, r24	; 0x2f
    1b9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba0:	9c a7       	std	Y+44, r25	; 0x2c
    1ba2:	8b a7       	std	Y+43, r24	; 0x2b
    1ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_displayCharacter+0x594>
    1bac:	9c a7       	std	Y+44, r25	; 0x2c
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_HIGH);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e8       	ldi	r26, 0x80	; 128
    1bc0:	bf e3       	ldi	r27, 0x3F	; 63
    1bc2:	8f a3       	std	Y+39, r24	; 0x27
    1bc4:	98 a7       	std	Y+40, r25	; 0x28
    1bc6:	a9 a7       	std	Y+41, r26	; 0x29
    1bc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6f a1       	ldd	r22, Y+39	; 0x27
    1bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bce:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	55 e4       	ldi	r21, 0x45	; 69
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8b a3       	std	Y+35, r24	; 0x23
    1be4:	9c a3       	std	Y+36, r25	; 0x24
    1be6:	ad a3       	std	Y+37, r26	; 0x25
    1be8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bea:	6b a1       	ldd	r22, Y+35	; 0x23
    1bec:	7c a1       	ldd	r23, Y+36	; 0x24
    1bee:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9a a3       	std	Y+34, r25	; 0x22
    1c08:	89 a3       	std	Y+33, r24	; 0x21
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    1c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c10:	8d a1       	ldd	r24, Y+37	; 0x25
    1c12:	9e a1       	ldd	r25, Y+38	; 0x26
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6f a1       	ldd	r22, Y+39	; 0x27
    1c26:	78 a5       	ldd	r23, Y+40	; 0x28
    1c28:	89 a5       	ldd	r24, Y+41	; 0x29
    1c2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9a a3       	std	Y+34, r25	; 0x22
    1c4a:	89 a3       	std	Y+33, r24	; 0x21
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_displayCharacter+0x658>
    1c4e:	80 e9       	ldi	r24, 0x90	; 144
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	98 a3       	std	Y+32, r25	; 0x20
    1c54:	8f 8f       	std	Y+31, r24	; 0x1f
    1c56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c58:	98 a1       	ldd	r25, Y+32	; 0x20
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_displayCharacter+0x646>
    1c5e:	98 a3       	std	Y+32, r25	; 0x20
    1c60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	89 a1       	ldd	r24, Y+33	; 0x21
    1c64:	9a a1       	ldd	r25, Y+34	; 0x22
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9a a3       	std	Y+34, r25	; 0x22
    1c6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_displayCharacter+0x63a>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6b a1       	ldd	r22, Y+35	; 0x23
    1c78:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c90:	8d 8f       	std	Y+29, r24	; 0x1d
    1c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_displayCharacter+0x682>
    1c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D4,GETBIT(DATA , 0));
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 59       	subi	r30, 0x9D	; 157
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	91 70       	andi	r25, 0x01	; 1
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	63 e0       	ldi	r22, 0x03	; 3
    1cae:	49 2f       	mov	r20, r25
    1cb0:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D5,GETBIT(DATA , 1));
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ed 59       	subi	r30, 0x9D	; 157
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	82 70       	andi	r24, 0x02	; 2
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	95 95       	asr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	98 2f       	mov	r25, r24
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	64 e0       	ldi	r22, 0x04	; 4
    1cce:	49 2f       	mov	r20, r25
    1cd0:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D6,GETBIT(DATA , 2));
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ed 59       	subi	r30, 0x9D	; 157
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	84 70       	andi	r24, 0x04	; 4
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	95 95       	asr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	95 95       	asr	r25
    1cea:	87 95       	ror	r24
    1cec:	98 2f       	mov	r25, r24
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	65 e0       	ldi	r22, 0x05	; 5
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORT_DATA_ID, LCD_DATA_D7,GETBIT(DATA , 3));
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ed 59       	subi	r30, 0x9D	; 157
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	88 70       	andi	r24, 0x08	; 8
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	95 95       	asr	r25
    1d0a:	87 95       	ror	r24
    1d0c:	95 95       	asr	r25
    1d0e:	87 95       	ror	r24
    1d10:	95 95       	asr	r25
    1d12:	87 95       	ror	r24
    1d14:	98 2f       	mov	r25, r24
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	66 e0       	ldi	r22, 0x06	; 6
    1d1a:	49 2f       	mov	r20, r25
    1d1c:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e8       	ldi	r26, 0x80	; 128
    1d26:	bf e3       	ldi	r27, 0x3F	; 63
    1d28:	89 8f       	std	Y+25, r24	; 0x19
    1d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	69 8d       	ldd	r22, Y+25	; 0x19
    1d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	55 e4       	ldi	r21, 0x45	; 69
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8d 8b       	std	Y+21, r24	; 0x15
    1d4a:	9e 8b       	std	Y+22, r25	; 0x16
    1d4c:	af 8b       	std	Y+23, r26	; 0x17
    1d4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_displayCharacter+0x7be>
    1db4:	80 e9       	ldi	r24, 0x90	; 144
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	9a 8b       	std	Y+18, r25	; 0x12
    1dba:	89 8b       	std	Y+17, r24	; 0x11
    1dbc:	89 89       	ldd	r24, Y+17	; 0x11
    1dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_displayCharacter+0x7ac>
    1dc4:	9a 8b       	std	Y+18, r25	; 0x12
    1dc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <LCD_displayCharacter+0x7a0>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dde:	7e 89       	ldd	r23, Y+22	; 0x16
    1de0:	8f 89       	ldd	r24, Y+23	; 0x17
    1de2:	98 8d       	ldd	r25, Y+24	; 0x18
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
    1df0:	8b 89       	ldd	r24, Y+19	; 0x13
    1df2:	9c 89       	ldd	r25, Y+20	; 0x14
    1df4:	98 8b       	std	Y+16, r25	; 0x10
    1df6:	8f 87       	std	Y+15, r24	; 0x0f
    1df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfa:	98 89       	ldd	r25, Y+16	; 0x10
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_displayCharacter+0x7e8>
    1e00:	98 8b       	std	Y+16, r25	; 0x10
    1e02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_LOW);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	ad 87       	std	Y+13, r26	; 0x0d
    1e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a e7       	ldi	r20, 0x7A	; 122
    1e2c:	55 e4       	ldi	r21, 0x45	; 69
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8f 83       	std	Y+7, r24	; 0x07
    1e38:	98 87       	std	Y+8, r25	; 0x08
    1e3a:	a9 87       	std	Y+9, r26	; 0x09
    1e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <LCD_displayCharacter+0x8ac>
    1ea2:	80 e9       	ldi	r24, 0x90	; 144
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_displayCharacter+0x89a>
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <LCD_displayCharacter+0x88e>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_displayCharacter+0x8d6>
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort( PORT_DATA_ID, DATA);
	_delay_ms(1);
	GPIO_writePin(PORT_ID_Enable, PIN_ID_Enable, LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1ef2:	cd 59       	subi	r28, 0x9D	; 157
    1ef4:	df 4f       	sbci	r29, 0xFF	; 255
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <LCD_init>:
void LCD_init(void) {
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORT_ID_RS, PIN_ID_RS, PIN_OUTPUT);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_ID_Enable, PIN_ID_Enable, PIN_OUTPUT);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	62 e0       	ldi	r22, 0x02	; 2
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
#if(LCD_NUM_BIT_MODE == 4)
	GPIO_setupPinDirection(PORT_DATA_ID , LCD_DATA_D4 , PIN_OUTPUT);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	63 e0       	ldi	r22, 0x03	; 3
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_DATA_ID , LCD_DATA_D5 , PIN_OUTPUT);
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_DATA_ID , LCD_DATA_D6 , PIN_OUTPUT);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	65 e0       	ldi	r22, 0x05	; 5
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_DATA_ID , LCD_DATA_D7 , PIN_OUTPUT);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	66 e0       	ldi	r22, 0x06	; 6
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1 );
    1f4e:	83 e3       	ldi	r24, 0x33	; 51
    1f50:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2 );
    1f54:	82 e3       	ldi	r24, 0x32	; 50
    1f56:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINE_FOUR_PIN_MODE);
    1f5a:	88 e2       	ldi	r24, 0x28	; 40
    1f5c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
#elif(LCD_NUM_BIT_MODE == 8)
	GPIO_setupPortDirection(PORT_DATA_ID, PORT_OUTPUT);
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINE_EIGHT_PIN_MODE);// 4BIT Mode 2 line
#endif
	LCD_sendCommand(LCD_Cursor_OFF);// Cursor Off
    1f60:	8c e0       	ldi	r24, 0x0C	; 12
    1f62:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
	LCD_sendCommand(LCD_Clear);//Clear Display
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <LCD_displayString>:
void LCD_displayString(uint8 *string) {
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <LCD_displayString+0x6>
    1f78:	0f 92       	push	r0
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9b 83       	std	Y+3, r25	; 0x03
    1f80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0 ;
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	0e c0       	rjmp	.+28     	; 0x1fa2 <LCD_displayString+0x30>
	while (string[i] != '\0') {
		LCD_displayCharacter(string[i]);
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	80 81       	ld	r24, Z
    1f98:	0e 94 0a 0b 	call	0x1614	; 0x1614 <LCD_displayCharacter>
		i++;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_Cursor_OFF);// Cursor Off
	LCD_sendCommand(LCD_Clear);//Clear Display
}
void LCD_displayString(uint8 *string) {
	uint8 i = 0 ;
	while (string[i] != '\0') {
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	fc 01       	movw	r30, r24
    1fae:	e2 0f       	add	r30, r18
    1fb0:	f3 1f       	adc	r31, r19
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 23       	and	r24, r24
    1fb6:	39 f7       	brne	.-50     	; 0x1f86 <LCD_displayString+0x14>
		LCD_displayCharacter(string[i]);
		i++;
	}

}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <LCD_MOVE_Cursor>:
void LCD_MOVE_Cursor(uint8 ROW , uint8 COL){
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <LCD_MOVE_Cursor+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <LCD_MOVE_Cursor+0x8>
    1fcc:	0f 92       	push	r0
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address ;
	switch(ROW){
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	3d 83       	std	Y+5, r19	; 0x05
    1fde:	2c 83       	std	Y+4, r18	; 0x04
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	c1 f0       	breq	.+48     	; 0x201a <LCD_MOVE_Cursor+0x56>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_MOVE_Cursor+0x3a>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <LCD_MOVE_Cursor+0x50>
    1ffc:	19 c0       	rjmp	.+50     	; 0x2030 <LCD_MOVE_Cursor+0x6c>
    1ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    2000:	3d 81       	ldd	r19, Y+5	; 0x05
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	69 f0       	breq	.+26     	; 0x2022 <LCD_MOVE_Cursor+0x5e>
    2008:	8c 81       	ldd	r24, Y+4	; 0x04
    200a:	9d 81       	ldd	r25, Y+5	; 0x05
    200c:	83 30       	cpi	r24, 0x03	; 3
    200e:	91 05       	cpc	r25, r1
    2010:	61 f0       	breq	.+24     	; 0x202a <LCD_MOVE_Cursor+0x66>
    2012:	0e c0       	rjmp	.+28     	; 0x2030 <LCD_MOVE_Cursor+0x6c>
	case 0 :
		lcd_memory_address = COL ;
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	0b c0       	rjmp	.+22     	; 0x2030 <LCD_MOVE_Cursor+0x6c>
		break ;
	case 1:
		lcd_memory_address=COL+0x40;
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	80 5c       	subi	r24, 0xC0	; 192
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	07 c0       	rjmp	.+14     	; 0x2030 <LCD_MOVE_Cursor+0x6c>
		break ;
	case 2:
		lcd_memory_address=COL+0x10;
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	80 5f       	subi	r24, 0xF0	; 240
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <LCD_MOVE_Cursor+0x6c>
		break ;
	case 3:
		lcd_memory_address=COL+0x50;
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	80 5b       	subi	r24, 0xB0	; 176
    202e:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	LCD_sendCommand(lcd_memory_address |LCD_Cursor_location );
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <LCD_Display_String_ROW_COL>:
void LCD_Display_String_ROW_COL(uint8 ROW , uint8 COL , char *Str){
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <LCD_Display_String_ROW_COL+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <LCD_Display_String_ROW_COL+0x8>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	6a 83       	std	Y+2, r22	; 0x02
    2058:	5c 83       	std	Y+4, r21	; 0x04
    205a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MOVE_Cursor(ROW , COL);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	6a 81       	ldd	r22, Y+2	; 0x02
    2060:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_MOVE_Cursor>
	LCD_displayString(Str);
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <LCD_Clear_Command>:
void LCD_Clear_Command(void){
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_Clear);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_sendCommand>
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <LCD_Intger_TO_String>:
void LCD_Intger_TO_String(int data_num){
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	62 97       	sbiw	r28, 0x12	; 18
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	9a 8b       	std	Y+18, r25	; 0x12
    20a4:	89 8b       	std	Y+17, r24	; 0x11
char buff[16];
itoa(data_num , buff , 10 );// 10 is base
    20a6:	89 89       	ldd	r24, Y+17	; 0x11
    20a8:	9a 89       	ldd	r25, Y+18	; 0x12
    20aa:	9e 01       	movw	r18, r28
    20ac:	2f 5f       	subi	r18, 0xFF	; 255
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	b9 01       	movw	r22, r18
    20b2:	4a e0       	ldi	r20, 0x0A	; 10
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	0e 94 3a 18 	call	0x3074	; 0x3074 <itoa>
LCD_displayString(buff);
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>
}
    20c2:	62 96       	adiw	r28, 0x12	; 18
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <LEDS_init>:
 * Author: Eman Sayed Hamdy
 */
#include"LED.h"
#include"gpio.h"
/********************* FUNCTION DEFINITION*********************/
void LEDS_init(void){
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
/*
 * Initializes all Leds (red, green, blue) pins direction.
   Turn off all the Leds
 * */
	GPIO_setupPinDirection(PORTC_ID,PIN0_ID,PIN_OUTPUT);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN1_ID,PIN_OUTPUT);
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>
#if(LED_STATE == LED_POSITIVE_LOGIC)
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
	// IF LEDSTATE == LED_NEGITIVE_LOGIC
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
#endif
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <LED_on>:
void LED_on(uint8 LED_ID_id) {
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
#if(LED_STATE == LED_NEGITIVE_LOGIC)
	//LED connect NEGITIVE logic
	GPIO_writePin(PORTC_ID,LED_ID_id,LOGIC_LOW);
#elif(LED_STATE == LED_POSITIVE_LOGIC)
	//LED is connect Positive Logic
	GPIO_writePin(PORTC_ID,LED_ID_id,LOGIC_HIGH);
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	69 81       	ldd	r22, Y+1	; 0x01
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
#endif

}
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <LED_off>:
void LED_off(uint8 LED_ID_id) {
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
#if(LED_STATE == LED_NEGITIVE_LOGIC)
	//LED connect NEGITIVE logic
	GPIO_writePin(PORTC_ID,LED_ID_id,LOGIC_HIGH);
#elif(LED_STATE == LED_POSITIVE_LOGIC)
	//LED is connect Positive Logic
	GPIO_writePin(PORTC_ID,LED_ID_id,LOGIC_LOW);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	69 81       	ldd	r22, Y+1	; 0x01
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
#endif
}
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <Ultrasonic_init>:
▪ Initialize the ICU driver as required.
▪ Set up the ICU callback function.
▪ Set the direction for the trigger pin as output through
the GPIO driver.
*/
void Ultrasonic_init(void){
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	ICU_init(&ICU_Configurations);
    2162:	8d e8       	ldi	r24, 0x8D	; 141
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    216a:	8c e9       	ldi	r24, 0x9C	; 156
    216c:	91 e1       	ldi	r25, 0x11	; 17
    216e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <ICU_setCallBack>

	GPIO_setupPinDirection(TRIGGER_PORT_ID , TRIGGER_PIN_ID , PIN_OUTPUT);
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	67 e0       	ldi	r22, 0x07	; 7
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 de 13 	call	0x27bc	; 0x27bc <GPIO_setupPinDirection>

}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <Ultrasonic_Trigger>:

/*Ultrasonic_Trigger();
 * Description:
▪ Send the trigger pulse to the ultrasonic sensor.*/
void Ultrasonic_Trigger(void){
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	2e 97       	sbiw	r28, 0x0e	; 14
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIGGER_PORT_ID , TRIGGER_PIN_ID , LOGIC_HIGH);
    2196:	83 e0       	ldi	r24, 0x03	; 3
    2198:	67 e0       	ldi	r22, 0x07	; 7
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e2       	ldi	r26, 0x20	; 32
    21a6:	b1 e4       	ldi	r27, 0x41	; 65
    21a8:	8b 87       	std	Y+11, r24	; 0x0b
    21aa:	9c 87       	std	Y+12, r25	; 0x0c
    21ac:	ad 87       	std	Y+13, r26	; 0x0d
    21ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a e7       	ldi	r20, 0x7A	; 122
    21be:	55 e4       	ldi	r21, 0x45	; 69
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8f 83       	std	Y+7, r24	; 0x07
    21ca:	98 87       	std	Y+8, r25	; 0x08
    21cc:	a9 87       	std	Y+9, r26	; 0x09
    21ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <Ultrasonic_Trigger+0xee>
	else if (__tmp > 65535)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <Ultrasonic_Trigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6b 85       	ldd	r22, Y+11	; 0x0b
    220c:	7c 85       	ldd	r23, Y+12	; 0x0c
    220e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2210:	9e 85       	ldd	r25, Y+14	; 0x0e
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <Ultrasonic_Trigger+0xd0>
    2234:	80 e9       	ldi	r24, 0x90	; 144
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <Ultrasonic_Trigger+0xbe>
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <Ultrasonic_Trigger+0xb2>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <Ultrasonic_Trigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <Ultrasonic_Trigger+0xfa>
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	GPIO_writePin(TRIGGER_PORT_ID , TRIGGER_PIN_ID , LOGIC_LOW);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	67 e0       	ldi	r22, 0x07	; 7
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	0e 94 c9 14 	call	0x2992	; 0x2992 <GPIO_writePin>
}
    228e:	2e 96       	adiw	r28, 0x0e	; 14
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <Ultrasonic_readDistance>:

/*Ultrasonic_readDistance();
 *  Send the trigger pulse by using the Ultrasonic_Trigger Function
 * Start the measurement process via the ICU driver.
 * */
uint16 Ultrasonic_readDistance(void){
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <Ultrasonic_readDistance+0x6>
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <Ultrasonic_readDistance+0x8>
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();
    22ac:	0e 94 c1 10 	call	0x2182	; 0x2182 <Ultrasonic_Trigger>
	if(g_edgeCount == 2)
    22b0:	80 91 90 01 	lds	r24, 0x0190
    22b4:	82 30       	cpi	r24, 0x02	; 2
    22b6:	a9 f5       	brne	.+106    	; 0x2322 <Ultrasonic_readDistance+0x82>
	{
		g_edgeCount = 0 ;
    22b8:	10 92 90 01 	sts	0x0190, r1
		/* calculate the distance */
		float value = ((1.0 / (F_CPU / 8)) * 17000);
    22bc:	85 e9       	ldi	r24, 0x95	; 149
    22be:	93 e4       	ldi	r25, 0x43	; 67
    22c0:	ab e0       	ldi	r26, 0x0B	; 11
    22c2:	bc e3       	ldi	r27, 0x3C	; 60
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	ab 83       	std	Y+3, r26	; 0x03
    22ca:	bc 83       	std	Y+4, r27	; 0x04
		 distance = (uint16)((g_timeHigh * value) + 1);
    22cc:	80 91 91 01 	lds	r24, 0x0191
    22d0:	90 91 92 01 	lds	r25, 0x0192
    22d4:	cc 01       	movw	r24, r24
    22d6:	a0 e0       	ldi	r26, 0x00	; 0
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	29 81       	ldd	r18, Y+1	; 0x01
    22ec:	3a 81       	ldd	r19, Y+2	; 0x02
    22ee:	4b 81       	ldd	r20, Y+3	; 0x03
    22f0:	5c 81       	ldd	r21, Y+4	; 0x04
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	90 93 96 01 	sts	0x0196, r25
    231e:	80 93 95 01 	sts	0x0195, r24
	}

	return distance ;
    2322:	80 91 95 01 	lds	r24, 0x0195
    2326:	90 91 96 01 	lds	r25, 0x0196
}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <Ultrasonic_edgeProcessing>:

/*Ultrasonic_edgeProcessing
 * This is the callback function called by the ICU driver.
 * It calculates the high time (pulse time) generated by the ultrasonic sensor.
 * */
void Ultrasonic_edgeProcessing(void){
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    2340:	80 91 90 01 	lds	r24, 0x0190
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	80 93 90 01 	sts	0x0190, r24
	if(g_edgeCount == 1)
    234a:	80 91 90 01 	lds	r24, 0x0190
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	31 f4       	brne	.+12     	; 0x235e <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    2352:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <ICU_setEdgeDetectionType>
    235c:	0d c0       	rjmp	.+26     	; 0x2378 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    235e:	80 91 90 01 	lds	r24, 0x0190
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	49 f4       	brne	.+18     	; 0x2378 <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    2366:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <ICU_getInputCaptureValue>
    236a:	90 93 92 01 	sts	0x0192, r25
    236e:	80 93 91 01 	sts	0x0191, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <ICU_setEdgeDetectionType>
	}
}
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <main>:
#include"Buzzer.h"
#include<util/delay.h>
#include <avr/io.h>


int main(){
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	ac 97       	sbiw	r28, 0x2c	; 44
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    2392:	af e5       	ldi	r26, 0x5F	; 95
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ef e5       	ldi	r30, 0x5F	; 95
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	80 68       	ori	r24, 0x80	; 128
    239e:	8c 93       	st	X, r24
	LCD_init();
    23a0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_init>
	Buzzer_init();
    23a4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <Buzzer_init>
	LEDS_init();
    23a8:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <LEDS_init>
	Ultrasonic_init();
    23ac:	0e 94 ad 10 	call	0x215a	; 0x215a <Ultrasonic_init>
	uint16 distance_of_Object_cm =0 ;
    23b0:	1c a6       	std	Y+44, r1	; 0x2c
    23b2:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_displayString("Distance=   CM");
    23b4:	80 e6       	ldi	r24, 0x60	; 96
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>

	while(1){
		/** Read the distance from the ultrasonic sensor **/
		distance_of_Object_cm = Ultrasonic_readDistance();
    23bc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <Ultrasonic_readDistance>
    23c0:	9c a7       	std	Y+44, r25	; 0x2c
    23c2:	8b a7       	std	Y+43, r24	; 0x2b
		if (distance_of_Object_cm > 100)
    23c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c8:	85 36       	cpi	r24, 0x65	; 101
    23ca:	91 05       	cpc	r25, r1
    23cc:	48 f0       	brcs	.+18     	; 0x23e0 <main+0x62>
		{
			/** If the distance is more than 100 cm, display it directly**/
			LCD_MOVE_Cursor(0,9);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	69 e0       	ldi	r22, 0x09	; 9
    23d2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_MOVE_Cursor>
			LCD_Intger_TO_String(distance_of_Object_cm);
    23d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23da:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_Intger_TO_String>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <main+0x78>
		}
		else
		{
			LCD_MOVE_Cursor(0,9);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	69 e0       	ldi	r22, 0x09	; 9
    23e4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_MOVE_Cursor>
			LCD_Intger_TO_String(distance_of_Object_cm);
    23e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ec:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_Intger_TO_String>
			// Clear the next character on the LCD if present
			LCD_displayCharacter(' ');
    23f0:	80 e2       	ldi	r24, 0x20	; 32
    23f2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <LCD_displayCharacter>
		}
		//Check for dangerous proximity (distance <= 5 cm)
		if(distance_of_Object_cm <= 5 ){
    23f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23fa:	86 30       	cpi	r24, 0x06	; 6
    23fc:	91 05       	cpc	r25, r1
    23fe:	08 f0       	brcs	.+2      	; 0x2402 <main+0x84>
    2400:	25 c1       	rjmp	.+586    	; 0x264c <main+0x2ce>
			Buzzer_on();
    2402:	0e 94 77 06 	call	0xcee	; 0xcee <Buzzer_on>
			LCD_Display_String_ROW_COL(1, 6 , "Stop");
    2406:	2f e6       	ldi	r18, 0x6F	; 111
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	66 e0       	ldi	r22, 0x06	; 6
    240e:	a9 01       	movw	r20, r18
    2410:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_Display_String_ROW_COL>
    2414:	02 c1       	rjmp	.+516    	; 0x261a <main+0x29c>
			//Keep blinking the LEDs and refreshing the distance until the obstacle is removed
			while(distance_of_Object_cm <= 5){
				distance_of_Object_cm = Ultrasonic_readDistance();
    2416:	0e 94 50 11 	call	0x22a0	; 0x22a0 <Ultrasonic_readDistance>
    241a:	9c a7       	std	Y+44, r25	; 0x2c
    241c:	8b a7       	std	Y+43, r24	; 0x2b
				LCD_MOVE_Cursor(0,9);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	69 e0       	ldi	r22, 0x09	; 9
    2422:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_MOVE_Cursor>
				LCD_Intger_TO_String(distance_of_Object_cm);
    2426:	8b a5       	ldd	r24, Y+43	; 0x2b
    2428:	9c a5       	ldd	r25, Y+44	; 0x2c
    242a:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_Intger_TO_String>
				LED_on(PIN0_ID);//LED RED
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
				LED_on(PIN1_ID);//LED GREEN
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
				LED_on(PIN2_ID);//LED BLUE
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a8 e4       	ldi	r26, 0x48	; 72
    2446:	b3 e4       	ldi	r27, 0x43	; 67
    2448:	8f a3       	std	Y+39, r24	; 0x27
    244a:	98 a7       	std	Y+40, r25	; 0x28
    244c:	a9 a7       	std	Y+41, r26	; 0x29
    244e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	6f a1       	ldd	r22, Y+39	; 0x27
    2452:	78 a5       	ldd	r23, Y+40	; 0x28
    2454:	89 a5       	ldd	r24, Y+41	; 0x29
    2456:	9a a5       	ldd	r25, Y+42	; 0x2a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	55 e4       	ldi	r21, 0x45	; 69
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	8b a3       	std	Y+35, r24	; 0x23
    246a:	9c a3       	std	Y+36, r25	; 0x24
    246c:	ad a3       	std	Y+37, r26	; 0x25
    246e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2470:	6b a1       	ldd	r22, Y+35	; 0x23
    2472:	7c a1       	ldd	r23, Y+36	; 0x24
    2474:	8d a1       	ldd	r24, Y+37	; 0x25
    2476:	9e a1       	ldd	r25, Y+38	; 0x26
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	2c f4       	brge	.+10     	; 0x2492 <main+0x114>
		__ticks = 1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9a a3       	std	Y+34, r25	; 0x22
    248e:	89 a3       	std	Y+33, r24	; 0x21
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <main+0x192>
	else if (__tmp > 65535)
    2492:	6b a1       	ldd	r22, Y+35	; 0x23
    2494:	7c a1       	ldd	r23, Y+36	; 0x24
    2496:	8d a1       	ldd	r24, Y+37	; 0x25
    2498:	9e a1       	ldd	r25, Y+38	; 0x26
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	4c f5       	brge	.+82     	; 0x24fc <main+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24aa:	6f a1       	ldd	r22, Y+39	; 0x27
    24ac:	78 a5       	ldd	r23, Y+40	; 0x28
    24ae:	89 a5       	ldd	r24, Y+41	; 0x29
    24b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	51 e4       	ldi	r21, 0x41	; 65
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9a a3       	std	Y+34, r25	; 0x22
    24d0:	89 a3       	std	Y+33, r24	; 0x21
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <main+0x174>
    24d4:	80 e9       	ldi	r24, 0x90	; 144
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	98 a3       	std	Y+32, r25	; 0x20
    24da:	8f 8f       	std	Y+31, r24	; 0x1f
    24dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24de:	98 a1       	ldd	r25, Y+32	; 0x20
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <main+0x162>
    24e4:	98 a3       	std	Y+32, r25	; 0x20
    24e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ea:	9a a1       	ldd	r25, Y+34	; 0x22
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9a a3       	std	Y+34, r25	; 0x22
    24f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	89 a1       	ldd	r24, Y+33	; 0x21
    24f4:	9a a1       	ldd	r25, Y+34	; 0x22
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <main+0x156>
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <main+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	6b a1       	ldd	r22, Y+35	; 0x23
    24fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2500:	8d a1       	ldd	r24, Y+37	; 0x25
    2502:	9e a1       	ldd	r25, Y+38	; 0x26
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9a a3       	std	Y+34, r25	; 0x22
    250e:	89 a3       	std	Y+33, r24	; 0x21
    2510:	89 a1       	ldd	r24, Y+33	; 0x21
    2512:	9a a1       	ldd	r25, Y+34	; 0x22
    2514:	9e 8f       	std	Y+30, r25	; 0x1e
    2516:	8d 8f       	std	Y+29, r24	; 0x1d
    2518:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <main+0x19e>
    2520:	9e 8f       	std	Y+30, r25	; 0x1e
    2522:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);
				LED_off(PIN0_ID);
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
				LED_off(PIN1_ID);
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
				LED_off(PIN2_ID);
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a8 e4       	ldi	r26, 0x48	; 72
    253c:	b3 e4       	ldi	r27, 0x43	; 67
    253e:	89 8f       	std	Y+25, r24	; 0x19
    2540:	9a 8f       	std	Y+26, r25	; 0x1a
    2542:	ab 8f       	std	Y+27, r26	; 0x1b
    2544:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2546:	69 8d       	ldd	r22, Y+25	; 0x19
    2548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	55 e4       	ldi	r21, 0x45	; 69
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8d 8b       	std	Y+21, r24	; 0x15
    2560:	9e 8b       	std	Y+22, r25	; 0x16
    2562:	af 8b       	std	Y+23, r26	; 0x17
    2564:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	2c f4       	brge	.+10     	; 0x2588 <main+0x20a>
		__ticks = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <main+0x288>
	else if (__tmp > 65535)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	4c f5       	brge	.+82     	; 0x25f2 <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	69 8d       	ldd	r22, Y+25	; 0x19
    25a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <main+0x26a>
    25ca:	80 e9       	ldi	r24, 0x90	; 144
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	9a 8b       	std	Y+18, r25	; 0x12
    25d0:	89 8b       	std	Y+17, r24	; 0x11
    25d2:	89 89       	ldd	r24, Y+17	; 0x11
    25d4:	9a 89       	ldd	r25, Y+18	; 0x12
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <main+0x258>
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	69 f7       	brne	.-38     	; 0x25ca <main+0x24c>
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f2:	6d 89       	ldd	r22, Y+21	; 0x15
    25f4:	7e 89       	ldd	r23, Y+22	; 0x16
    25f6:	8f 89       	ldd	r24, Y+23	; 0x17
    25f8:	98 8d       	ldd	r25, Y+24	; 0x18
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	98 8b       	std	Y+16, r25	; 0x10
    260c:	8f 87       	std	Y+15, r24	; 0x0f
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2610:	98 89       	ldd	r25, Y+16	; 0x10
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <main+0x294>
    2616:	98 8b       	std	Y+16, r25	; 0x10
    2618:	8f 87       	std	Y+15, r24	; 0x0f
		//Check for dangerous proximity (distance <= 5 cm)
		if(distance_of_Object_cm <= 5 ){
			Buzzer_on();
			LCD_Display_String_ROW_COL(1, 6 , "Stop");
			//Keep blinking the LEDs and refreshing the distance until the obstacle is removed
			while(distance_of_Object_cm <= 5){
    261a:	8b a5       	ldd	r24, Y+43	; 0x2b
    261c:	9c a5       	ldd	r25, Y+44	; 0x2c
    261e:	86 30       	cpi	r24, 0x06	; 6
    2620:	91 05       	cpc	r25, r1
    2622:	08 f4       	brcc	.+2      	; 0x2626 <main+0x2a8>
    2624:	f8 ce       	rjmp	.-528    	; 0x2416 <main+0x98>
				LED_off(PIN1_ID);
				LED_off(PIN2_ID);
				_delay_ms(200);
			}
			/* Once the distance is safe, turn off the buzzer and LEDs */
			Buzzer_off();
    2626:	0e 94 83 06 	call	0xd06	; 0xd06 <Buzzer_off>
			LED_off(PIN0_ID);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
			LED_off(PIN1_ID);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
			LED_off(PIN2_ID);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
			/* Clear the STOP message on the LCD */
			LCD_Display_String_ROW_COL(1, 0 , "                ");
    263c:	24 e7       	ldi	r18, 0x74	; 116
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	a9 01       	movw	r20, r18
    2646:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_Display_String_ROW_COL>
    264a:	45 c0       	rjmp	.+138    	; 0x26d6 <main+0x358>

		}
		//IF Distance between 6 and 10 cm
		else if((distance_of_Object_cm <= 6)||(distance_of_Object_cm <= 10) ){
    264c:	8b a5       	ldd	r24, Y+43	; 0x2b
    264e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2650:	87 30       	cpi	r24, 0x07	; 7
    2652:	91 05       	cpc	r25, r1
    2654:	28 f0       	brcs	.+10     	; 0x2660 <main+0x2e2>
    2656:	8b a5       	ldd	r24, Y+43	; 0x2b
    2658:	9c a5       	ldd	r25, Y+44	; 0x2c
    265a:	8b 30       	cpi	r24, 0x0B	; 11
    265c:	91 05       	cpc	r25, r1
    265e:	50 f4       	brcc	.+20     	; 0x2674 <main+0x2f6>
			LED_on(PIN0_ID);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
			LED_on(PIN1_ID);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
			LED_on(PIN2_ID);
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
    2672:	31 c0       	rjmp	.+98     	; 0x26d6 <main+0x358>
		}
		//IF Distance between 11 and 15 cm
		else if((distance_of_Object_cm <= 11)||(distance_of_Object_cm <= 15)){
    2674:	8b a5       	ldd	r24, Y+43	; 0x2b
    2676:	9c a5       	ldd	r25, Y+44	; 0x2c
    2678:	8c 30       	cpi	r24, 0x0C	; 12
    267a:	91 05       	cpc	r25, r1
    267c:	28 f0       	brcs	.+10     	; 0x2688 <main+0x30a>
    267e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2680:	9c a5       	ldd	r25, Y+44	; 0x2c
    2682:	80 31       	cpi	r24, 0x10	; 16
    2684:	91 05       	cpc	r25, r1
    2686:	50 f4       	brcc	.+20     	; 0x269c <main+0x31e>

			LED_on(PIN0_ID);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
			LED_on(PIN1_ID);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
			LED_off(PIN2_ID);
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
    269a:	1d c0       	rjmp	.+58     	; 0x26d6 <main+0x358>
		}
		//IF Distance between 16 and 20 cm
		else if((distance_of_Object_cm <= 16)||(distance_of_Object_cm <= 20)){
    269c:	8b a5       	ldd	r24, Y+43	; 0x2b
    269e:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a0:	81 31       	cpi	r24, 0x11	; 17
    26a2:	91 05       	cpc	r25, r1
    26a4:	28 f0       	brcs	.+10     	; 0x26b0 <main+0x332>
    26a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26aa:	85 31       	cpi	r24, 0x15	; 21
    26ac:	91 05       	cpc	r25, r1
    26ae:	50 f4       	brcc	.+20     	; 0x26c4 <main+0x346>

			LED_on(PIN0_ID);
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	0e 94 8f 10 	call	0x211e	; 0x211e <LED_on>
			LED_off(PIN1_ID);
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
			LED_off(PIN2_ID);
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <main+0x358>
		}
		// Distance more than 20 cm
		else{
			LED_off(PIN0_ID);
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
			LED_off(PIN1_ID);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
			LED_off(PIN2_ID);
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	0e 94 9e 10 	call	0x213c	; 0x213c <LED_off>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a8 ec       	ldi	r26, 0xC8	; 200
    26dc:	b2 e4       	ldi	r27, 0x42	; 66
    26de:	8b 87       	std	Y+11, r24	; 0x0b
    26e0:	9c 87       	std	Y+12, r25	; 0x0c
    26e2:	ad 87       	std	Y+13, r26	; 0x0d
    26e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	55 e4       	ldi	r21, 0x45	; 69
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	98 87       	std	Y+8, r25	; 0x08
    2702:	a9 87       	std	Y+9, r26	; 0x09
    2704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <main+0x3aa>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <main+0x428>
	else if (__tmp > 65535)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <main+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <main+0x40a>
    276a:	80 e9       	ldi	r24, 0x90	; 144
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0x3f8>
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <main+0x3ec>
    2790:	15 ce       	rjmp	.-982    	; 0x23bc <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <main+0x434>
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	00 ce       	rjmp	.-1024   	; 0x23bc <main+0x3e>

000027bc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <GPIO_setupPinDirection+0x6>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <GPIO_setupPinDirection+0x8>
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	6a 83       	std	Y+2, r22	; 0x02
    27ce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	88 30       	cpi	r24, 0x08	; 8
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <GPIO_setupPinDirection+0x1c>
    27d6:	d5 c0       	rjmp	.+426    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	84 30       	cpi	r24, 0x04	; 4
    27dc:	08 f0       	brcs	.+2      	; 0x27e0 <GPIO_setupPinDirection+0x24>
    27de:	d1 c0       	rjmp	.+418    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	3d 83       	std	Y+5, r19	; 0x05
    27e8:	2c 83       	std	Y+4, r18	; 0x04
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	9d 81       	ldd	r25, Y+5	; 0x05
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	91 05       	cpc	r25, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <GPIO_setupPinDirection+0x3a>
    27f4:	43 c0       	rjmp	.+134    	; 0x287c <GPIO_setupPinDirection+0xc0>
    27f6:	2c 81       	ldd	r18, Y+4	; 0x04
    27f8:	3d 81       	ldd	r19, Y+5	; 0x05
    27fa:	22 30       	cpi	r18, 0x02	; 2
    27fc:	31 05       	cpc	r19, r1
    27fe:	2c f4       	brge	.+10     	; 0x280a <GPIO_setupPinDirection+0x4e>
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	9d 81       	ldd	r25, Y+5	; 0x05
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	71 f0       	breq	.+28     	; 0x2824 <GPIO_setupPinDirection+0x68>
    2808:	bc c0       	rjmp	.+376    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
    280a:	2c 81       	ldd	r18, Y+4	; 0x04
    280c:	3d 81       	ldd	r19, Y+5	; 0x05
    280e:	22 30       	cpi	r18, 0x02	; 2
    2810:	31 05       	cpc	r19, r1
    2812:	09 f4       	brne	.+2      	; 0x2816 <GPIO_setupPinDirection+0x5a>
    2814:	5f c0       	rjmp	.+190    	; 0x28d4 <GPIO_setupPinDirection+0x118>
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	9d 81       	ldd	r25, Y+5	; 0x05
    281a:	83 30       	cpi	r24, 0x03	; 3
    281c:	91 05       	cpc	r25, r1
    281e:	09 f4       	brne	.+2      	; 0x2822 <GPIO_setupPinDirection+0x66>
    2820:	85 c0       	rjmp	.+266    	; 0x292c <GPIO_setupPinDirection+0x170>
    2822:	af c0       	rjmp	.+350    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	a1 f4       	brne	.+40     	; 0x2852 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    282a:	aa e3       	ldi	r26, 0x3A	; 58
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ea e3       	ldi	r30, 0x3A	; 58
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	48 2f       	mov	r20, r24
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	02 2e       	mov	r0, r18
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <GPIO_setupPinDirection+0x8c>
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	0a 94       	dec	r0
    284a:	e2 f7       	brpl	.-8      	; 0x2844 <GPIO_setupPinDirection+0x88>
    284c:	84 2b       	or	r24, r20
    284e:	8c 93       	st	X, r24
    2850:	98 c0       	rjmp	.+304    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2852:	aa e3       	ldi	r26, 0x3A	; 58
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ea e3       	ldi	r30, 0x3A	; 58
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	48 2f       	mov	r20, r24
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	02 2e       	mov	r0, r18
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <GPIO_setupPinDirection+0xb4>
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	0a 94       	dec	r0
    2872:	e2 f7       	brpl	.-8      	; 0x286c <GPIO_setupPinDirection+0xb0>
    2874:	80 95       	com	r24
    2876:	84 23       	and	r24, r20
    2878:	8c 93       	st	X, r24
    287a:	83 c0       	rjmp	.+262    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	a1 f4       	brne	.+40     	; 0x28aa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2882:	a7 e3       	ldi	r26, 0x37	; 55
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e7 e3       	ldi	r30, 0x37	; 55
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	48 2f       	mov	r20, r24
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	02 2e       	mov	r0, r18
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <GPIO_setupPinDirection+0xe4>
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	0a 94       	dec	r0
    28a2:	e2 f7       	brpl	.-8      	; 0x289c <GPIO_setupPinDirection+0xe0>
    28a4:	84 2b       	or	r24, r20
    28a6:	8c 93       	st	X, r24
    28a8:	6c c0       	rjmp	.+216    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    28aa:	a7 e3       	ldi	r26, 0x37	; 55
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e7 e3       	ldi	r30, 0x37	; 55
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	48 2f       	mov	r20, r24
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	02 2e       	mov	r0, r18
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <GPIO_setupPinDirection+0x10c>
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	0a 94       	dec	r0
    28ca:	e2 f7       	brpl	.-8      	; 0x28c4 <GPIO_setupPinDirection+0x108>
    28cc:	80 95       	com	r24
    28ce:	84 23       	and	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	57 c0       	rjmp	.+174    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	a1 f4       	brne	.+40     	; 0x2902 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    28da:	a4 e3       	ldi	r26, 0x34	; 52
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e4 e3       	ldi	r30, 0x34	; 52
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	48 2f       	mov	r20, r24
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 2e       	mov	r0, r18
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <GPIO_setupPinDirection+0x13c>
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	0a 94       	dec	r0
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <GPIO_setupPinDirection+0x138>
    28fc:	84 2b       	or	r24, r20
    28fe:	8c 93       	st	X, r24
    2900:	40 c0       	rjmp	.+128    	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2902:	a4 e3       	ldi	r26, 0x34	; 52
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e4 e3       	ldi	r30, 0x34	; 52
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	48 2f       	mov	r20, r24
    290e:	8a 81       	ldd	r24, Y+2	; 0x02
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	02 2e       	mov	r0, r18
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <GPIO_setupPinDirection+0x164>
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	0a 94       	dec	r0
    2922:	e2 f7       	brpl	.-8      	; 0x291c <GPIO_setupPinDirection+0x160>
    2924:	80 95       	com	r24
    2926:	84 23       	and	r24, r20
    2928:	8c 93       	st	X, r24
    292a:	2b c0       	rjmp	.+86     	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	a1 f4       	brne	.+40     	; 0x295a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2932:	a1 e3       	ldi	r26, 0x31	; 49
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e1 e3       	ldi	r30, 0x31	; 49
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	48 2f       	mov	r20, r24
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	02 2e       	mov	r0, r18
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <GPIO_setupPinDirection+0x194>
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	0a 94       	dec	r0
    2952:	e2 f7       	brpl	.-8      	; 0x294c <GPIO_setupPinDirection+0x190>
    2954:	84 2b       	or	r24, r20
    2956:	8c 93       	st	X, r24
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    295a:	a1 e3       	ldi	r26, 0x31	; 49
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e1 e3       	ldi	r30, 0x31	; 49
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	48 2f       	mov	r20, r24
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	02 2e       	mov	r0, r18
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <GPIO_setupPinDirection+0x1bc>
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	0a 94       	dec	r0
    297a:	e2 f7       	brpl	.-8      	; 0x2974 <GPIO_setupPinDirection+0x1b8>
    297c:	80 95       	com	r24
    297e:	84 23       	and	r24, r20
    2980:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	00 d0       	rcall	.+0      	; 0x2998 <GPIO_writePin+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <GPIO_writePin+0x8>
    299a:	0f 92       	push	r0
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	6a 83       	std	Y+2, r22	; 0x02
    29a4:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	88 30       	cpi	r24, 0x08	; 8
    29aa:	08 f0       	brcs	.+2      	; 0x29ae <GPIO_writePin+0x1c>
    29ac:	d5 c0       	rjmp	.+426    	; 0x2b58 <GPIO_writePin+0x1c6>
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	84 30       	cpi	r24, 0x04	; 4
    29b2:	08 f0       	brcs	.+2      	; 0x29b6 <GPIO_writePin+0x24>
    29b4:	d1 c0       	rjmp	.+418    	; 0x2b58 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
		else
		{
			switch(port_num){
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	3d 83       	std	Y+5, r19	; 0x05
    29be:	2c 83       	std	Y+4, r18	; 0x04
    29c0:	8c 81       	ldd	r24, Y+4	; 0x04
    29c2:	9d 81       	ldd	r25, Y+5	; 0x05
    29c4:	81 30       	cpi	r24, 0x01	; 1
    29c6:	91 05       	cpc	r25, r1
    29c8:	09 f4       	brne	.+2      	; 0x29cc <GPIO_writePin+0x3a>
    29ca:	43 c0       	rjmp	.+134    	; 0x2a52 <GPIO_writePin+0xc0>
    29cc:	2c 81       	ldd	r18, Y+4	; 0x04
    29ce:	3d 81       	ldd	r19, Y+5	; 0x05
    29d0:	22 30       	cpi	r18, 0x02	; 2
    29d2:	31 05       	cpc	r19, r1
    29d4:	2c f4       	brge	.+10     	; 0x29e0 <GPIO_writePin+0x4e>
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	9d 81       	ldd	r25, Y+5	; 0x05
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	71 f0       	breq	.+28     	; 0x29fa <GPIO_writePin+0x68>
    29de:	bc c0       	rjmp	.+376    	; 0x2b58 <GPIO_writePin+0x1c6>
    29e0:	2c 81       	ldd	r18, Y+4	; 0x04
    29e2:	3d 81       	ldd	r19, Y+5	; 0x05
    29e4:	22 30       	cpi	r18, 0x02	; 2
    29e6:	31 05       	cpc	r19, r1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <GPIO_writePin+0x5a>
    29ea:	5f c0       	rjmp	.+190    	; 0x2aaa <GPIO_writePin+0x118>
    29ec:	8c 81       	ldd	r24, Y+4	; 0x04
    29ee:	9d 81       	ldd	r25, Y+5	; 0x05
    29f0:	83 30       	cpi	r24, 0x03	; 3
    29f2:	91 05       	cpc	r25, r1
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <GPIO_writePin+0x66>
    29f6:	85 c0       	rjmp	.+266    	; 0x2b02 <GPIO_writePin+0x170>
    29f8:	af c0       	rjmp	.+350    	; 0x2b58 <GPIO_writePin+0x1c6>
			case PORTA_ID :
				if(value == PIN_OUTPUT)
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	a1 f4       	brne	.+40     	; 0x2a28 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA , pin_num);
    2a00:	ab e3       	ldi	r26, 0x3B	; 59
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	eb e3       	ldi	r30, 0x3B	; 59
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	02 2e       	mov	r0, r18
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <GPIO_writePin+0x8c>
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	0a 94       	dec	r0
    2a20:	e2 f7       	brpl	.-8      	; 0x2a1a <GPIO_writePin+0x88>
    2a22:	84 2b       	or	r24, r20
    2a24:	8c 93       	st	X, r24
    2a26:	98 c0       	rjmp	.+304    	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA , pin_num);
    2a28:	ab e3       	ldi	r26, 0x3B	; 59
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	eb e3       	ldi	r30, 0x3B	; 59
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	48 2f       	mov	r20, r24
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	02 2e       	mov	r0, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <GPIO_writePin+0xb4>
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	0a 94       	dec	r0
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <GPIO_writePin+0xb0>
    2a4a:	80 95       	com	r24
    2a4c:	84 23       	and	r24, r20
    2a4e:	8c 93       	st	X, r24
    2a50:	83 c0       	rjmp	.+262    	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID :
				if(value == PIN_OUTPUT)
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	a1 f4       	brne	.+40     	; 0x2a80 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB , pin_num);
    2a58:	a8 e3       	ldi	r26, 0x38	; 56
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e8 e3       	ldi	r30, 0x38	; 56
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	48 2f       	mov	r20, r24
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 2e       	mov	r0, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <GPIO_writePin+0xe4>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	0a 94       	dec	r0
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <GPIO_writePin+0xe0>
    2a7a:	84 2b       	or	r24, r20
    2a7c:	8c 93       	st	X, r24
    2a7e:	6c c0       	rjmp	.+216    	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB , pin_num);
    2a80:	a8 e3       	ldi	r26, 0x38	; 56
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e8 e3       	ldi	r30, 0x38	; 56
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	48 2f       	mov	r20, r24
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	02 2e       	mov	r0, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <GPIO_writePin+0x10c>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	0a 94       	dec	r0
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <GPIO_writePin+0x108>
    2aa2:	80 95       	com	r24
    2aa4:	84 23       	and	r24, r20
    2aa6:	8c 93       	st	X, r24
    2aa8:	57 c0       	rjmp	.+174    	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID :
				if(value == PIN_OUTPUT)
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	a1 f4       	brne	.+40     	; 0x2ad8 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC , pin_num);
    2ab0:	a5 e3       	ldi	r26, 0x35	; 53
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e5 e3       	ldi	r30, 0x35	; 53
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	48 2f       	mov	r20, r24
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	02 2e       	mov	r0, r18
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <GPIO_writePin+0x13c>
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	0a 94       	dec	r0
    2ad0:	e2 f7       	brpl	.-8      	; 0x2aca <GPIO_writePin+0x138>
    2ad2:	84 2b       	or	r24, r20
    2ad4:	8c 93       	st	X, r24
    2ad6:	40 c0       	rjmp	.+128    	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC , pin_num);
    2ad8:	a5 e3       	ldi	r26, 0x35	; 53
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e5 e3       	ldi	r30, 0x35	; 53
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	48 2f       	mov	r20, r24
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	02 2e       	mov	r0, r18
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <GPIO_writePin+0x164>
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	0a 94       	dec	r0
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <GPIO_writePin+0x160>
    2afa:	80 95       	com	r24
    2afc:	84 23       	and	r24, r20
    2afe:	8c 93       	st	X, r24
    2b00:	2b c0       	rjmp	.+86     	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID :
				if(value == PIN_OUTPUT)
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	a1 f4       	brne	.+40     	; 0x2b30 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD , pin_num);
    2b08:	a2 e3       	ldi	r26, 0x32	; 50
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	e2 e3       	ldi	r30, 0x32	; 50
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	48 2f       	mov	r20, r24
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	02 2e       	mov	r0, r18
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <GPIO_writePin+0x194>
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	0a 94       	dec	r0
    2b28:	e2 f7       	brpl	.-8      	; 0x2b22 <GPIO_writePin+0x190>
    2b2a:	84 2b       	or	r24, r20
    2b2c:	8c 93       	st	X, r24
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD , pin_num);
    2b30:	a2 e3       	ldi	r26, 0x32	; 50
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e2 e3       	ldi	r30, 0x32	; 50
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	48 2f       	mov	r20, r24
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	02 2e       	mov	r0, r18
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <GPIO_writePin+0x1bc>
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	0a 94       	dec	r0
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <GPIO_writePin+0x1b8>
    2b52:	80 95       	com	r24
    2b54:	84 23       	and	r24, r20
    2b56:	8c 93       	st	X, r24
				}
				break;
			}
		}

}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <GPIO_readPin+0x6>
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <GPIO_readPin+0x8>
    2b70:	0f 92       	push	r0
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	88 30       	cpi	r24, 0x08	; 8
    2b7e:	18 f4       	brcc	.+6      	; 0x2b86 <GPIO_readPin+0x1e>
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	84 30       	cpi	r24, 0x04	; 4
    2b84:	10 f0       	brcs	.+4      	; 0x2b8a <GPIO_readPin+0x22>
			{
				return LOGIC_LOW ;
    2b86:	1d 82       	std	Y+5, r1	; 0x05
    2b88:	82 c0       	rjmp	.+260    	; 0x2c8e <GPIO_readPin+0x126>
				/* Do Nothing */
			}
			else
			{
				switch(port_num)
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	3c 83       	std	Y+4, r19	; 0x04
    2b92:	2b 83       	std	Y+3, r18	; 0x03
    2b94:	4b 81       	ldd	r20, Y+3	; 0x03
    2b96:	5c 81       	ldd	r21, Y+4	; 0x04
    2b98:	41 30       	cpi	r20, 0x01	; 1
    2b9a:	51 05       	cpc	r21, r1
    2b9c:	79 f1       	breq	.+94     	; 0x2bfc <GPIO_readPin+0x94>
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	82 30       	cpi	r24, 0x02	; 2
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	34 f4       	brge	.+12     	; 0x2bb4 <GPIO_readPin+0x4c>
    2ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    2baa:	3c 81       	ldd	r19, Y+4	; 0x04
    2bac:	21 15       	cp	r18, r1
    2bae:	31 05       	cpc	r19, r1
    2bb0:	69 f0       	breq	.+26     	; 0x2bcc <GPIO_readPin+0x64>
    2bb2:	6c c0       	rjmp	.+216    	; 0x2c8c <GPIO_readPin+0x124>
    2bb4:	4b 81       	ldd	r20, Y+3	; 0x03
    2bb6:	5c 81       	ldd	r21, Y+4	; 0x04
    2bb8:	42 30       	cpi	r20, 0x02	; 2
    2bba:	51 05       	cpc	r21, r1
    2bbc:	b9 f1       	breq	.+110    	; 0x2c2c <GPIO_readPin+0xc4>
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	83 30       	cpi	r24, 0x03	; 3
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <GPIO_readPin+0x62>
    2bc8:	49 c0       	rjmp	.+146    	; 0x2c5c <GPIO_readPin+0xf4>
    2bca:	60 c0       	rjmp	.+192    	; 0x2c8c <GPIO_readPin+0x124>
				{
				case PORTA_ID :
					if(BIT_IS_SET(PINA , pin_num))
    2bcc:	e9 e3       	ldi	r30, 0x39	; 57
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a9 01       	movw	r20, r18
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <GPIO_readPin+0x7c>
    2be0:	55 95       	asr	r21
    2be2:	47 95       	ror	r20
    2be4:	8a 95       	dec	r24
    2be6:	e2 f7       	brpl	.-8      	; 0x2be0 <GPIO_readPin+0x78>
    2be8:	ca 01       	movw	r24, r20
    2bea:	81 70       	andi	r24, 0x01	; 1
    2bec:	90 70       	andi	r25, 0x00	; 0
    2bee:	88 23       	and	r24, r24
    2bf0:	19 f0       	breq	.+6      	; 0x2bf8 <GPIO_readPin+0x90>
					{
						return LOGIC_HIGH ;
    2bf2:	51 e0       	ldi	r21, 0x01	; 1
    2bf4:	5d 83       	std	Y+5, r21	; 0x05
    2bf6:	4b c0       	rjmp	.+150    	; 0x2c8e <GPIO_readPin+0x126>
					}
					else
					{
						return LOGIC_LOW ;
    2bf8:	1d 82       	std	Y+5, r1	; 0x05
    2bfa:	49 c0       	rjmp	.+146    	; 0x2c8e <GPIO_readPin+0x126>
					}
					break;
				    case PORTB_ID :
					if(BIT_IS_SET(PINB , pin_num))
    2bfc:	e6 e3       	ldi	r30, 0x36	; 54
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	88 2f       	mov	r24, r24
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	a9 01       	movw	r20, r18
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <GPIO_readPin+0xac>
    2c10:	55 95       	asr	r21
    2c12:	47 95       	ror	r20
    2c14:	8a 95       	dec	r24
    2c16:	e2 f7       	brpl	.-8      	; 0x2c10 <GPIO_readPin+0xa8>
    2c18:	ca 01       	movw	r24, r20
    2c1a:	81 70       	andi	r24, 0x01	; 1
    2c1c:	90 70       	andi	r25, 0x00	; 0
    2c1e:	88 23       	and	r24, r24
    2c20:	19 f0       	breq	.+6      	; 0x2c28 <GPIO_readPin+0xc0>
					{
						return LOGIC_HIGH ;
    2c22:	51 e0       	ldi	r21, 0x01	; 1
    2c24:	5d 83       	std	Y+5, r21	; 0x05
    2c26:	33 c0       	rjmp	.+102    	; 0x2c8e <GPIO_readPin+0x126>
					}
						else
					{
						return LOGIC_LOW ;
    2c28:	1d 82       	std	Y+5, r1	; 0x05
    2c2a:	31 c0       	rjmp	.+98     	; 0x2c8e <GPIO_readPin+0x126>
					}
					break;
				    case PORTC_ID :
					if(BIT_IS_SET(PINC , pin_num))
    2c2c:	e3 e3       	ldi	r30, 0x33	; 51
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	88 2f       	mov	r24, r24
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a9 01       	movw	r20, r18
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <GPIO_readPin+0xdc>
    2c40:	55 95       	asr	r21
    2c42:	47 95       	ror	r20
    2c44:	8a 95       	dec	r24
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <GPIO_readPin+0xd8>
    2c48:	ca 01       	movw	r24, r20
    2c4a:	81 70       	andi	r24, 0x01	; 1
    2c4c:	90 70       	andi	r25, 0x00	; 0
    2c4e:	88 23       	and	r24, r24
    2c50:	19 f0       	breq	.+6      	; 0x2c58 <GPIO_readPin+0xf0>
					{
						return LOGIC_HIGH ;
    2c52:	51 e0       	ldi	r21, 0x01	; 1
    2c54:	5d 83       	std	Y+5, r21	; 0x05
    2c56:	1b c0       	rjmp	.+54     	; 0x2c8e <GPIO_readPin+0x126>
					}
						else
					{
						return LOGIC_LOW ;
    2c58:	1d 82       	std	Y+5, r1	; 0x05
    2c5a:	19 c0       	rjmp	.+50     	; 0x2c8e <GPIO_readPin+0x126>
					}
					break;
				    case PORTD_ID :
					if(BIT_IS_SET(PIND , pin_num))
    2c5c:	e0 e3       	ldi	r30, 0x30	; 48
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	a9 01       	movw	r20, r18
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <GPIO_readPin+0x10c>
    2c70:	55 95       	asr	r21
    2c72:	47 95       	ror	r20
    2c74:	8a 95       	dec	r24
    2c76:	e2 f7       	brpl	.-8      	; 0x2c70 <GPIO_readPin+0x108>
    2c78:	ca 01       	movw	r24, r20
    2c7a:	81 70       	andi	r24, 0x01	; 1
    2c7c:	90 70       	andi	r25, 0x00	; 0
    2c7e:	88 23       	and	r24, r24
    2c80:	19 f0       	breq	.+6      	; 0x2c88 <GPIO_readPin+0x120>
					{
						return LOGIC_HIGH ;
    2c82:	51 e0       	ldi	r21, 0x01	; 1
    2c84:	5d 83       	std	Y+5, r21	; 0x05
    2c86:	03 c0       	rjmp	.+6      	; 0x2c8e <GPIO_readPin+0x126>
					}
					    else
			    	{
						return LOGIC_LOW ;
    2c88:	1d 82       	std	Y+5, r1	; 0x05
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <GPIO_readPin+0x126>
					}
					break;
				}
			}
	return LOGIC_LOW;
    2c8c:	1d 82       	std	Y+5, r1	; 0x05
    2c8e:	8d 81       	ldd	r24, Y+5	; 0x05


}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <GPIO_setupPortDirection+0x6>
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <GPIO_setupPortDirection+0x8>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	84 30       	cpi	r24, 0x04	; 4
    2cb4:	90 f5       	brcc	.+100    	; 0x2d1a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	3c 83       	std	Y+4, r19	; 0x04
    2cbe:	2b 83       	std	Y+3, r18	; 0x03
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	d1 f0       	breq	.+52     	; 0x2cfe <GPIO_setupPortDirection+0x5e>
    2cca:	2b 81       	ldd	r18, Y+3	; 0x03
    2ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cce:	22 30       	cpi	r18, 0x02	; 2
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <GPIO_setupPortDirection+0x3e>
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	61 f0       	breq	.+24     	; 0x2cf4 <GPIO_setupPortDirection+0x54>
    2cdc:	1e c0       	rjmp	.+60     	; 0x2d1a <GPIO_setupPortDirection+0x7a>
    2cde:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce2:	22 30       	cpi	r18, 0x02	; 2
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	81 f0       	breq	.+32     	; 0x2d08 <GPIO_setupPortDirection+0x68>
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	83 30       	cpi	r24, 0x03	; 3
    2cee:	91 05       	cpc	r25, r1
    2cf0:	81 f0       	breq	.+32     	; 0x2d12 <GPIO_setupPortDirection+0x72>
    2cf2:	13 c0       	rjmp	.+38     	; 0x2d1a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2cf4:	ea e3       	ldi	r30, 0x3A	; 58
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	80 83       	st	Z, r24
    2cfc:	0e c0       	rjmp	.+28     	; 0x2d1a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2cfe:	e7 e3       	ldi	r30, 0x37	; 55
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	80 83       	st	Z, r24
    2d06:	09 c0       	rjmp	.+18     	; 0x2d1a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2d08:	e4 e3       	ldi	r30, 0x34	; 52
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	80 83       	st	Z, r24
    2d10:	04 c0       	rjmp	.+8      	; 0x2d1a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2d12:	e1 e3       	ldi	r30, 0x31	; 49
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	80 83       	st	Z, r24
			break;
		}
	}
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <GPIO_writePort+0x6>
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <GPIO_writePort+0x8>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	84 30       	cpi	r24, 0x04	; 4
    2d3c:	90 f5       	brcc	.+100    	; 0x2da2 <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
		else
		{
			switch(port_num)
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	3c 83       	std	Y+4, r19	; 0x04
    2d46:	2b 83       	std	Y+3, r18	; 0x03
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	91 05       	cpc	r25, r1
    2d50:	d1 f0       	breq	.+52     	; 0x2d86 <GPIO_writePort+0x5e>
    2d52:	2b 81       	ldd	r18, Y+3	; 0x03
    2d54:	3c 81       	ldd	r19, Y+4	; 0x04
    2d56:	22 30       	cpi	r18, 0x02	; 2
    2d58:	31 05       	cpc	r19, r1
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <GPIO_writePort+0x3e>
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	61 f0       	breq	.+24     	; 0x2d7c <GPIO_writePort+0x54>
    2d64:	1e c0       	rjmp	.+60     	; 0x2da2 <GPIO_writePort+0x7a>
    2d66:	2b 81       	ldd	r18, Y+3	; 0x03
    2d68:	3c 81       	ldd	r19, Y+4	; 0x04
    2d6a:	22 30       	cpi	r18, 0x02	; 2
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	81 f0       	breq	.+32     	; 0x2d90 <GPIO_writePort+0x68>
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	83 30       	cpi	r24, 0x03	; 3
    2d76:	91 05       	cpc	r25, r1
    2d78:	81 f0       	breq	.+32     	; 0x2d9a <GPIO_writePort+0x72>
    2d7a:	13 c0       	rjmp	.+38     	; 0x2da2 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:
				PORTA=value;
    2d7c:	eb e3       	ldi	r30, 0x3B	; 59
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	80 83       	st	Z, r24
    2d84:	0e c0       	rjmp	.+28     	; 0x2da2 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB=value;
    2d86:	e8 e3       	ldi	r30, 0x38	; 56
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	80 83       	st	Z, r24
    2d8e:	09 c0       	rjmp	.+18     	; 0x2da2 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC=value;
    2d90:	e5 e3       	ldi	r30, 0x35	; 53
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	8a 81       	ldd	r24, Y+2	; 0x02
    2d96:	80 83       	st	Z, r24
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD=value;
    2d9a:	e2 e3       	ldi	r30, 0x32	; 50
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	80 83       	st	Z, r24
				break;

			}
		}

}
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <GPIO_readPort+0x6>
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <GPIO_readPort+0x8>
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	10 f0       	brcs	.+4      	; 0x2dc8 <GPIO_readPort+0x18>
			{
				/* Do Nothing */
		return LOGIC_LOW;
    2dc4:	1c 82       	std	Y+4, r1	; 0x04
    2dc6:	34 c0       	rjmp	.+104    	; 0x2e30 <GPIO_readPort+0x80>
			}
			else
			{
				switch(port_num)
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	3b 83       	std	Y+3, r19	; 0x03
    2dd0:	2a 83       	std	Y+2, r18	; 0x02
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	d1 f0       	breq	.+52     	; 0x2e10 <GPIO_readPort+0x60>
    2ddc:	2a 81       	ldd	r18, Y+2	; 0x02
    2dde:	3b 81       	ldd	r19, Y+3	; 0x03
    2de0:	22 30       	cpi	r18, 0x02	; 2
    2de2:	31 05       	cpc	r19, r1
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <GPIO_readPort+0x40>
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	61 f0       	breq	.+24     	; 0x2e06 <GPIO_readPort+0x56>
    2dee:	1f c0       	rjmp	.+62     	; 0x2e2e <GPIO_readPort+0x7e>
    2df0:	2a 81       	ldd	r18, Y+2	; 0x02
    2df2:	3b 81       	ldd	r19, Y+3	; 0x03
    2df4:	22 30       	cpi	r18, 0x02	; 2
    2df6:	31 05       	cpc	r19, r1
    2df8:	81 f0       	breq	.+32     	; 0x2e1a <GPIO_readPort+0x6a>
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	83 30       	cpi	r24, 0x03	; 3
    2e00:	91 05       	cpc	r25, r1
    2e02:	81 f0       	breq	.+32     	; 0x2e24 <GPIO_readPort+0x74>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <GPIO_readPort+0x7e>
				{
				case PORTA_ID:
					return PINA;
    2e06:	e9 e3       	ldi	r30, 0x39	; 57
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	90 81       	ld	r25, Z
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	10 c0       	rjmp	.+32     	; 0x2e30 <GPIO_readPort+0x80>
					break;
				case PORTB_ID:
					return PINB;
    2e10:	e6 e3       	ldi	r30, 0x36	; 54
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	20 81       	ld	r18, Z
    2e16:	2c 83       	std	Y+4, r18	; 0x04
    2e18:	0b c0       	rjmp	.+22     	; 0x2e30 <GPIO_readPort+0x80>
					break;
				case PORTC_ID:
					return PINC;
    2e1a:	e3 e3       	ldi	r30, 0x33	; 51
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	30 81       	ld	r19, Z
    2e20:	3c 83       	std	Y+4, r19	; 0x04
    2e22:	06 c0       	rjmp	.+12     	; 0x2e30 <GPIO_readPort+0x80>
					break;
				case PORTD_ID:
					return PIND;
    2e24:	e0 e3       	ldi	r30, 0x30	; 48
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	8c 83       	std	Y+4, r24	; 0x04
    2e2c:	01 c0       	rjmp	.+2      	; 0x2e30 <GPIO_readPort+0x80>
					break;

				}
			}
	return 0 ;
    2e2e:	1c 82       	std	Y+4, r1	; 0x04
    2e30:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	2f 93       	push	r18
    2e4c:	3f 93       	push	r19
    2e4e:	4f 93       	push	r20
    2e50:	5f 93       	push	r21
    2e52:	6f 93       	push	r22
    2e54:	7f 93       	push	r23
    2e56:	8f 93       	push	r24
    2e58:	9f 93       	push	r25
    2e5a:	af 93       	push	r26
    2e5c:	bf 93       	push	r27
    2e5e:	ef 93       	push	r30
    2e60:	ff 93       	push	r31
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2e6a:	80 91 93 01 	lds	r24, 0x0193
    2e6e:	90 91 94 01 	lds	r25, 0x0194
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	29 f0       	breq	.+10     	; 0x2e80 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2e76:	e0 91 93 01 	lds	r30, 0x0193
    2e7a:	f0 91 94 01 	lds	r31, 0x0194
    2e7e:	09 95       	icall
	}
}
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	ff 91       	pop	r31
    2e86:	ef 91       	pop	r30
    2e88:	bf 91       	pop	r27
    2e8a:	af 91       	pop	r26
    2e8c:	9f 91       	pop	r25
    2e8e:	8f 91       	pop	r24
    2e90:	7f 91       	pop	r23
    2e92:	6f 91       	pop	r22
    2e94:	5f 91       	pop	r21
    2e96:	4f 91       	pop	r20
    2e98:	3f 91       	pop	r19
    2e9a:	2f 91       	pop	r18
    2e9c:	0f 90       	pop	r0
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	0f 90       	pop	r0
    2ea2:	1f 90       	pop	r1
    2ea4:	18 95       	reti

00002ea6 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <ICU_init+0x6>
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */

	DDRD &= ~(1<<PD6);
    2eb4:	a1 e3       	ldi	r26, 0x31	; 49
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e1 e3       	ldi	r30, 0x31	; 49
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	8f 7b       	andi	r24, 0xBF	; 191
    2ec0:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2ec2:	ef e4       	ldi	r30, 0x4F	; 79
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	8c e0       	ldi	r24, 0x0C	; 12
    2ec8:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    2eca:	ae e4       	ldi	r26, 0x4E	; 78
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	ee e4       	ldi	r30, 0x4E	; 78
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	98 7f       	andi	r25, 0xF8	; 248
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	fa 81       	ldd	r31, Y+2	; 0x02
    2edc:	80 81       	ld	r24, Z
    2ede:	89 2b       	or	r24, r25
    2ee0:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    2ee2:	ae e4       	ldi	r26, 0x4E	; 78
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	ee e4       	ldi	r30, 0x4E	; 78
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	28 2f       	mov	r18, r24
    2eee:	2f 7b       	andi	r18, 0xBF	; 191
    2ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef4:	81 81       	ldd	r24, Z+1	; 0x01
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	00 24       	eor	r0, r0
    2efc:	96 95       	lsr	r25
    2efe:	87 95       	ror	r24
    2f00:	07 94       	ror	r0
    2f02:	96 95       	lsr	r25
    2f04:	87 95       	ror	r24
    2f06:	07 94       	ror	r0
    2f08:	98 2f       	mov	r25, r24
    2f0a:	80 2d       	mov	r24, r0
    2f0c:	82 2b       	or	r24, r18
    2f0e:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    2f10:	ec e4       	ldi	r30, 0x4C	; 76
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	11 82       	std	Z+1, r1	; 0x01
    2f16:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    2f18:	e6 e4       	ldi	r30, 0x46	; 70
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	11 82       	std	Z+1, r1	; 0x01
    2f1e:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    2f20:	a9 e5       	ldi	r26, 0x59	; 89
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e9 e5       	ldi	r30, 0x59	; 89
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	80 62       	ori	r24, 0x20	; 32
    2f2c:	8c 93       	st	X, r24
}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <ICU_setCallBack+0x6>
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	90 93 94 01 	sts	0x0194, r25
    2f4e:	80 93 93 01 	sts	0x0193, r24
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	0f 92       	push	r0
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    2f68:	ae e4       	ldi	r26, 0x4E	; 78
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	ee e4       	ldi	r30, 0x4E	; 78
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	28 2f       	mov	r18, r24
    2f74:	2f 7b       	andi	r18, 0xBF	; 191
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	88 2f       	mov	r24, r24
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	00 24       	eor	r0, r0
    2f7e:	96 95       	lsr	r25
    2f80:	87 95       	ror	r24
    2f82:	07 94       	ror	r0
    2f84:	96 95       	lsr	r25
    2f86:	87 95       	ror	r24
    2f88:	07 94       	ror	r0
    2f8a:	98 2f       	mov	r25, r24
    2f8c:	80 2d       	mov	r24, r0
    2f8e:	82 2b       	or	r24, r18
    2f90:	8c 93       	st	X, r24
}
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2fa2:	e6 e4       	ldi	r30, 0x46	; 70
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
}
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2fb8:	ec e4       	ldi	r30, 0x4C	; 76
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	11 82       	std	Z+1, r1	; 0x01
    2fbe:	10 82       	st	Z, r1
}
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    2fce:	ef e4       	ldi	r30, 0x4F	; 79
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	10 82       	st	Z, r1
	TCCR1B = 0;
    2fd4:	ee e4       	ldi	r30, 0x4E	; 78
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	10 82       	st	Z, r1
	TCNT1 = 0;
    2fda:	ec e4       	ldi	r30, 0x4C	; 76
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	11 82       	std	Z+1, r1	; 0x01
    2fe0:	10 82       	st	Z, r1
	ICR1 = 0;
    2fe2:	e6 e4       	ldi	r30, 0x46	; 70
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	11 82       	std	Z+1, r1	; 0x01
    2fe8:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    2fea:	a9 e5       	ldi	r26, 0x59	; 89
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e9 e5       	ldi	r30, 0x59	; 89
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	8f 7d       	andi	r24, 0xDF	; 223
    2ff6:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2ff8:	10 92 94 01 	sts	0x0194, r1
    2ffc:	10 92 93 01 	sts	0x0193, r1
}
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <__prologue_saves__>:
    3006:	2f 92       	push	r2
    3008:	3f 92       	push	r3
    300a:	4f 92       	push	r4
    300c:	5f 92       	push	r5
    300e:	6f 92       	push	r6
    3010:	7f 92       	push	r7
    3012:	8f 92       	push	r8
    3014:	9f 92       	push	r9
    3016:	af 92       	push	r10
    3018:	bf 92       	push	r11
    301a:	cf 92       	push	r12
    301c:	df 92       	push	r13
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	ca 1b       	sub	r28, r26
    3030:	db 0b       	sbc	r29, r27
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	09 94       	ijmp

0000303e <__epilogue_restores__>:
    303e:	2a 88       	ldd	r2, Y+18	; 0x12
    3040:	39 88       	ldd	r3, Y+17	; 0x11
    3042:	48 88       	ldd	r4, Y+16	; 0x10
    3044:	5f 84       	ldd	r5, Y+15	; 0x0f
    3046:	6e 84       	ldd	r6, Y+14	; 0x0e
    3048:	7d 84       	ldd	r7, Y+13	; 0x0d
    304a:	8c 84       	ldd	r8, Y+12	; 0x0c
    304c:	9b 84       	ldd	r9, Y+11	; 0x0b
    304e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3050:	b9 84       	ldd	r11, Y+9	; 0x09
    3052:	c8 84       	ldd	r12, Y+8	; 0x08
    3054:	df 80       	ldd	r13, Y+7	; 0x07
    3056:	ee 80       	ldd	r14, Y+6	; 0x06
    3058:	fd 80       	ldd	r15, Y+5	; 0x05
    305a:	0c 81       	ldd	r16, Y+4	; 0x04
    305c:	1b 81       	ldd	r17, Y+3	; 0x03
    305e:	aa 81       	ldd	r26, Y+2	; 0x02
    3060:	b9 81       	ldd	r27, Y+1	; 0x01
    3062:	ce 0f       	add	r28, r30
    3064:	d1 1d       	adc	r29, r1
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	ed 01       	movw	r28, r26
    3072:	08 95       	ret

00003074 <itoa>:
    3074:	fb 01       	movw	r30, r22
    3076:	9f 01       	movw	r18, r30
    3078:	e8 94       	clt
    307a:	42 30       	cpi	r20, 0x02	; 2
    307c:	c4 f0       	brlt	.+48     	; 0x30ae <itoa+0x3a>
    307e:	45 32       	cpi	r20, 0x25	; 37
    3080:	b4 f4       	brge	.+44     	; 0x30ae <itoa+0x3a>
    3082:	4a 30       	cpi	r20, 0x0A	; 10
    3084:	29 f4       	brne	.+10     	; 0x3090 <itoa+0x1c>
    3086:	97 fb       	bst	r25, 7
    3088:	1e f4       	brtc	.+6      	; 0x3090 <itoa+0x1c>
    308a:	90 95       	com	r25
    308c:	81 95       	neg	r24
    308e:	9f 4f       	sbci	r25, 0xFF	; 255
    3090:	64 2f       	mov	r22, r20
    3092:	77 27       	eor	r23, r23
    3094:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__udivmodhi4>
    3098:	80 5d       	subi	r24, 0xD0	; 208
    309a:	8a 33       	cpi	r24, 0x3A	; 58
    309c:	0c f0       	brlt	.+2      	; 0x30a0 <itoa+0x2c>
    309e:	89 5d       	subi	r24, 0xD9	; 217
    30a0:	81 93       	st	Z+, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	a1 f7       	brne	.-24     	; 0x3090 <itoa+0x1c>
    30a8:	16 f4       	brtc	.+4      	; 0x30ae <itoa+0x3a>
    30aa:	5d e2       	ldi	r21, 0x2D	; 45
    30ac:	51 93       	st	Z+, r21
    30ae:	10 82       	st	Z, r1
    30b0:	c9 01       	movw	r24, r18
    30b2:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <strrev>

000030b6 <strrev>:
    30b6:	dc 01       	movw	r26, r24
    30b8:	fc 01       	movw	r30, r24
    30ba:	67 2f       	mov	r22, r23
    30bc:	71 91       	ld	r23, Z+
    30be:	77 23       	and	r23, r23
    30c0:	e1 f7       	brne	.-8      	; 0x30ba <strrev+0x4>
    30c2:	32 97       	sbiw	r30, 0x02	; 2
    30c4:	04 c0       	rjmp	.+8      	; 0x30ce <strrev+0x18>
    30c6:	7c 91       	ld	r23, X
    30c8:	6d 93       	st	X+, r22
    30ca:	70 83       	st	Z, r23
    30cc:	62 91       	ld	r22, -Z
    30ce:	ae 17       	cp	r26, r30
    30d0:	bf 07       	cpc	r27, r31
    30d2:	c8 f3       	brcs	.-14     	; 0x30c6 <strrev+0x10>
    30d4:	08 95       	ret

000030d6 <__udivmodhi4>:
    30d6:	aa 1b       	sub	r26, r26
    30d8:	bb 1b       	sub	r27, r27
    30da:	51 e1       	ldi	r21, 0x11	; 17
    30dc:	07 c0       	rjmp	.+14     	; 0x30ec <__udivmodhi4_ep>

000030de <__udivmodhi4_loop>:
    30de:	aa 1f       	adc	r26, r26
    30e0:	bb 1f       	adc	r27, r27
    30e2:	a6 17       	cp	r26, r22
    30e4:	b7 07       	cpc	r27, r23
    30e6:	10 f0       	brcs	.+4      	; 0x30ec <__udivmodhi4_ep>
    30e8:	a6 1b       	sub	r26, r22
    30ea:	b7 0b       	sbc	r27, r23

000030ec <__udivmodhi4_ep>:
    30ec:	88 1f       	adc	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	5a 95       	dec	r21
    30f2:	a9 f7       	brne	.-22     	; 0x30de <__udivmodhi4_loop>
    30f4:	80 95       	com	r24
    30f6:	90 95       	com	r25
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	08 95       	ret

000030fe <_exit>:
    30fe:	f8 94       	cli

00003100 <__stop_program>:
    3100:	ff cf       	rjmp	.-2      	; 0x3100 <__stop_program>
